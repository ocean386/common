// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newBarDataWeek(db *gorm.DB, opts ...gen.DOOption) barDataWeek {
	_barDataWeek := barDataWeek{}

	_barDataWeek.barDataWeekDo.UseDB(db, opts...)
	_barDataWeek.barDataWeekDo.UseModel(&model.BarDataWeek{})

	tableName := _barDataWeek.barDataWeekDo.TableName()
	_barDataWeek.ALL = field.NewAsterisk(tableName)
	_barDataWeek.ID = field.NewInt64(tableName, "id")
	_barDataWeek.CurrencyID = field.NewString(tableName, "currency_id")
	_barDataWeek.BeginTime = field.NewInt64(tableName, "begin_time")
	_barDataWeek.OpenPrice = field.NewFloat64(tableName, "open_price")
	_barDataWeek.ClosePrice = field.NewFloat64(tableName, "close_price")
	_barDataWeek.HighPrice = field.NewFloat64(tableName, "high_price")
	_barDataWeek.LowPrice = field.NewFloat64(tableName, "low_price")
	_barDataWeek.BarType = field.NewString(tableName, "bar_type")
	_barDataWeek.SigType = field.NewInt64(tableName, "sig_type")
	_barDataWeek.PriceChange = field.NewFloat64(tableName, "price_change")
	_barDataWeek.PriceRange = field.NewFloat64(tableName, "price_range")
	_barDataWeek.PriceRangePrecent = field.NewFloat64(tableName, "price_range_precent")
	_barDataWeek.TriggerTime = field.NewInt64(tableName, "trigger_time")

	_barDataWeek.fillFieldMap()

	return _barDataWeek
}

// barDataWeek 时间粒度表-每周
type barDataWeek struct {
	barDataWeekDo

	ALL               field.Asterisk
	ID                field.Int64   // 主键ID
	CurrencyID        field.String  // 币种ID
	BeginTime         field.Int64   // 开始时间
	OpenPrice         field.Float64 // 开盘价格
	ClosePrice        field.Float64 // 收盘价格
	HighPrice         field.Float64 // 最高价格
	LowPrice          field.Float64 // 最低价格
	BarType           field.String  // 时间粒度类型:默认值1m,1m/5m/15m/30m/1H/4H/12H/1D/1W/1M
	SigType           field.Int64   // 行情信号: 0-/, 1-上涨, 2-快速上涨, 3-爆涨, 4-下跌, 5-快速下跌, 6-爆跌
	PriceChange       field.Float64 // 涨跌幅度
	PriceRange        field.Float64 // 涨跌振幅
	PriceRangePrecent field.Float64 // 涨跌振幅比例
	TriggerTime       field.Int64   // 触发时间

	fieldMap map[string]field.Expr
}

func (b barDataWeek) Table(newTableName string) *barDataWeek {
	b.barDataWeekDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b barDataWeek) As(alias string) *barDataWeek {
	b.barDataWeekDo.DO = *(b.barDataWeekDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *barDataWeek) updateTableName(table string) *barDataWeek {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CurrencyID = field.NewString(table, "currency_id")
	b.BeginTime = field.NewInt64(table, "begin_time")
	b.OpenPrice = field.NewFloat64(table, "open_price")
	b.ClosePrice = field.NewFloat64(table, "close_price")
	b.HighPrice = field.NewFloat64(table, "high_price")
	b.LowPrice = field.NewFloat64(table, "low_price")
	b.BarType = field.NewString(table, "bar_type")
	b.SigType = field.NewInt64(table, "sig_type")
	b.PriceChange = field.NewFloat64(table, "price_change")
	b.PriceRange = field.NewFloat64(table, "price_range")
	b.PriceRangePrecent = field.NewFloat64(table, "price_range_precent")
	b.TriggerTime = field.NewInt64(table, "trigger_time")

	b.fillFieldMap()

	return b
}

func (b *barDataWeek) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *barDataWeek) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["id"] = b.ID
	b.fieldMap["currency_id"] = b.CurrencyID
	b.fieldMap["begin_time"] = b.BeginTime
	b.fieldMap["open_price"] = b.OpenPrice
	b.fieldMap["close_price"] = b.ClosePrice
	b.fieldMap["high_price"] = b.HighPrice
	b.fieldMap["low_price"] = b.LowPrice
	b.fieldMap["bar_type"] = b.BarType
	b.fieldMap["sig_type"] = b.SigType
	b.fieldMap["price_change"] = b.PriceChange
	b.fieldMap["price_range"] = b.PriceRange
	b.fieldMap["price_range_precent"] = b.PriceRangePrecent
	b.fieldMap["trigger_time"] = b.TriggerTime
}

func (b barDataWeek) clone(db *gorm.DB) barDataWeek {
	b.barDataWeekDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b barDataWeek) replaceDB(db *gorm.DB) barDataWeek {
	b.barDataWeekDo.ReplaceDB(db)
	return b
}

type barDataWeekDo struct{ gen.DO }

type IBarDataWeekDo interface {
	gen.SubQuery
	Debug() IBarDataWeekDo
	WithContext(ctx context.Context) IBarDataWeekDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBarDataWeekDo
	WriteDB() IBarDataWeekDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBarDataWeekDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBarDataWeekDo
	Not(conds ...gen.Condition) IBarDataWeekDo
	Or(conds ...gen.Condition) IBarDataWeekDo
	Select(conds ...field.Expr) IBarDataWeekDo
	Where(conds ...gen.Condition) IBarDataWeekDo
	Order(conds ...field.Expr) IBarDataWeekDo
	Distinct(cols ...field.Expr) IBarDataWeekDo
	Omit(cols ...field.Expr) IBarDataWeekDo
	Join(table schema.Tabler, on ...field.Expr) IBarDataWeekDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBarDataWeekDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBarDataWeekDo
	Group(cols ...field.Expr) IBarDataWeekDo
	Having(conds ...gen.Condition) IBarDataWeekDo
	Limit(limit int) IBarDataWeekDo
	Offset(offset int) IBarDataWeekDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBarDataWeekDo
	Unscoped() IBarDataWeekDo
	Create(values ...*model.BarDataWeek) error
	CreateInBatches(values []*model.BarDataWeek, batchSize int) error
	Save(values ...*model.BarDataWeek) error
	First() (*model.BarDataWeek, error)
	Take() (*model.BarDataWeek, error)
	Last() (*model.BarDataWeek, error)
	Find() ([]*model.BarDataWeek, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BarDataWeek, err error)
	FindInBatches(result *[]*model.BarDataWeek, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BarDataWeek) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBarDataWeekDo
	Assign(attrs ...field.AssignExpr) IBarDataWeekDo
	Joins(fields ...field.RelationField) IBarDataWeekDo
	Preload(fields ...field.RelationField) IBarDataWeekDo
	FirstOrInit() (*model.BarDataWeek, error)
	FirstOrCreate() (*model.BarDataWeek, error)
	FindByPage(offset int, limit int) (result []*model.BarDataWeek, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBarDataWeekDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b barDataWeekDo) Debug() IBarDataWeekDo {
	return b.withDO(b.DO.Debug())
}

func (b barDataWeekDo) WithContext(ctx context.Context) IBarDataWeekDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b barDataWeekDo) ReadDB() IBarDataWeekDo {
	return b.Clauses(dbresolver.Read)
}

func (b barDataWeekDo) WriteDB() IBarDataWeekDo {
	return b.Clauses(dbresolver.Write)
}

func (b barDataWeekDo) Session(config *gorm.Session) IBarDataWeekDo {
	return b.withDO(b.DO.Session(config))
}

func (b barDataWeekDo) Clauses(conds ...clause.Expression) IBarDataWeekDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b barDataWeekDo) Returning(value interface{}, columns ...string) IBarDataWeekDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b barDataWeekDo) Not(conds ...gen.Condition) IBarDataWeekDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b barDataWeekDo) Or(conds ...gen.Condition) IBarDataWeekDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b barDataWeekDo) Select(conds ...field.Expr) IBarDataWeekDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b barDataWeekDo) Where(conds ...gen.Condition) IBarDataWeekDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b barDataWeekDo) Order(conds ...field.Expr) IBarDataWeekDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b barDataWeekDo) Distinct(cols ...field.Expr) IBarDataWeekDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b barDataWeekDo) Omit(cols ...field.Expr) IBarDataWeekDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b barDataWeekDo) Join(table schema.Tabler, on ...field.Expr) IBarDataWeekDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b barDataWeekDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBarDataWeekDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b barDataWeekDo) RightJoin(table schema.Tabler, on ...field.Expr) IBarDataWeekDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b barDataWeekDo) Group(cols ...field.Expr) IBarDataWeekDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b barDataWeekDo) Having(conds ...gen.Condition) IBarDataWeekDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b barDataWeekDo) Limit(limit int) IBarDataWeekDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b barDataWeekDo) Offset(offset int) IBarDataWeekDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b barDataWeekDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBarDataWeekDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b barDataWeekDo) Unscoped() IBarDataWeekDo {
	return b.withDO(b.DO.Unscoped())
}

func (b barDataWeekDo) Create(values ...*model.BarDataWeek) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b barDataWeekDo) CreateInBatches(values []*model.BarDataWeek, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b barDataWeekDo) Save(values ...*model.BarDataWeek) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b barDataWeekDo) First() (*model.BarDataWeek, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarDataWeek), nil
	}
}

func (b barDataWeekDo) Take() (*model.BarDataWeek, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarDataWeek), nil
	}
}

func (b barDataWeekDo) Last() (*model.BarDataWeek, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarDataWeek), nil
	}
}

func (b barDataWeekDo) Find() ([]*model.BarDataWeek, error) {
	result, err := b.DO.Find()
	return result.([]*model.BarDataWeek), err
}

func (b barDataWeekDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BarDataWeek, err error) {
	buf := make([]*model.BarDataWeek, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b barDataWeekDo) FindInBatches(result *[]*model.BarDataWeek, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b barDataWeekDo) Attrs(attrs ...field.AssignExpr) IBarDataWeekDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b barDataWeekDo) Assign(attrs ...field.AssignExpr) IBarDataWeekDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b barDataWeekDo) Joins(fields ...field.RelationField) IBarDataWeekDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b barDataWeekDo) Preload(fields ...field.RelationField) IBarDataWeekDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b barDataWeekDo) FirstOrInit() (*model.BarDataWeek, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarDataWeek), nil
	}
}

func (b barDataWeekDo) FirstOrCreate() (*model.BarDataWeek, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarDataWeek), nil
	}
}

func (b barDataWeekDo) FindByPage(offset int, limit int) (result []*model.BarDataWeek, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b barDataWeekDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b barDataWeekDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b barDataWeekDo) Delete(models ...*model.BarDataWeek) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *barDataWeekDo) withDO(do gen.Dao) *barDataWeekDo {
	b.DO = *do.(*gen.DO)
	return b
}
