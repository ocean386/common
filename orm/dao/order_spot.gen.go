// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newOrderSpot(db *gorm.DB, opts ...gen.DOOption) orderSpot {
	_orderSpot := orderSpot{}

	_orderSpot.orderSpotDo.UseDB(db, opts...)
	_orderSpot.orderSpotDo.UseModel(&model.OrderSpot{})

	tableName := _orderSpot.orderSpotDo.TableName()
	_orderSpot.ALL = field.NewAsterisk(tableName)
	_orderSpot.ID = field.NewInt64(tableName, "id")
	_orderSpot.OrderPid = field.NewString(tableName, "order_pid")
	_orderSpot.OrderCid = field.NewString(tableName, "order_cid")
	_orderSpot.UserID = field.NewInt64(tableName, "user_id")
	_orderSpot.CurrencyID = field.NewString(tableName, "currency_id")
	_orderSpot.Simulation = field.NewInt64(tableName, "simulation")
	_orderSpot.BuySellType = field.NewInt64(tableName, "buy_sell_type")
	_orderSpot.OrderStatus = field.NewInt64(tableName, "order_status")
	_orderSpot.OrderType = field.NewInt64(tableName, "order_type")
	_orderSpot.Total = field.NewFloat64(tableName, "total")
	_orderSpot.OrderPrice = field.NewFloat64(tableName, "order_price")
	_orderSpot.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_orderSpot.Filled = field.NewFloat64(tableName, "filled")
	_orderSpot.FillPrice = field.NewFloat64(tableName, "fill_price")
	_orderSpot.FilledValue = field.NewFloat64(tableName, "filled_value")
	_orderSpot.ProfitAmount = field.NewFloat64(tableName, "profit_amount")
	_orderSpot.Fee = field.NewFloat64(tableName, "fee")
	_orderSpot.CreatedAt = field.NewInt64(tableName, "created_at")
	_orderSpot.FilledAt = field.NewInt64(tableName, "filled_at")
	_orderSpot.CanceledAt = field.NewInt64(tableName, "canceled_at")

	_orderSpot.fillFieldMap()

	return _orderSpot
}

// orderSpot 现货订单列表
type orderSpot struct {
	orderSpotDo

	ALL          field.Asterisk
	ID           field.Int64   // 主键ID
	OrderPid     field.String  // OK平台订单ID
	OrderCid     field.String  // 客户自定义订单ID
	UserID       field.Int64   // 用户ID
	CurrencyID   field.String  // 币种ID
	Simulation   field.Int64   // 模拟订单: 0-全部,1-否, 2-是
	BuySellType  field.Int64   // 交易方向: 0-全部,1-买入,2-卖出
	OrderStatus  field.Int64   // 订单状态:0-全部,1-等待提交,2-等待成交,3-部分成交,4-完全成交,5-已撤销
	OrderType    field.Int64   // 交易类型: 0-全部,1-高级限价,2-限价委托,3-市价委托 4-计划委托
	Total        field.Float64 // 委托总量
	OrderPrice   field.Float64 // 委托价格
	TotalAmount  field.Float64 // 委托金额
	Filled       field.Float64 // 已成交量
	FillPrice    field.Float64 // 成交均价
	FilledValue  field.Float64 // 已成交金额
	ProfitAmount field.Float64 // 盈亏金额
	Fee          field.Float64 // 手续费
	CreatedAt    field.Int64   // 创建时间
	FilledAt     field.Int64   // 成交时间
	CanceledAt   field.Int64   // 撤销时间

	fieldMap map[string]field.Expr
}

func (o orderSpot) Table(newTableName string) *orderSpot {
	o.orderSpotDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderSpot) As(alias string) *orderSpot {
	o.orderSpotDo.DO = *(o.orderSpotDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderSpot) updateTableName(table string) *orderSpot {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderPid = field.NewString(table, "order_pid")
	o.OrderCid = field.NewString(table, "order_cid")
	o.UserID = field.NewInt64(table, "user_id")
	o.CurrencyID = field.NewString(table, "currency_id")
	o.Simulation = field.NewInt64(table, "simulation")
	o.BuySellType = field.NewInt64(table, "buy_sell_type")
	o.OrderStatus = field.NewInt64(table, "order_status")
	o.OrderType = field.NewInt64(table, "order_type")
	o.Total = field.NewFloat64(table, "total")
	o.OrderPrice = field.NewFloat64(table, "order_price")
	o.TotalAmount = field.NewFloat64(table, "total_amount")
	o.Filled = field.NewFloat64(table, "filled")
	o.FillPrice = field.NewFloat64(table, "fill_price")
	o.FilledValue = field.NewFloat64(table, "filled_value")
	o.ProfitAmount = field.NewFloat64(table, "profit_amount")
	o.Fee = field.NewFloat64(table, "fee")
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.FilledAt = field.NewInt64(table, "filled_at")
	o.CanceledAt = field.NewInt64(table, "canceled_at")

	o.fillFieldMap()

	return o
}

func (o *orderSpot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderSpot) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 20)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_pid"] = o.OrderPid
	o.fieldMap["order_cid"] = o.OrderCid
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["currency_id"] = o.CurrencyID
	o.fieldMap["simulation"] = o.Simulation
	o.fieldMap["buy_sell_type"] = o.BuySellType
	o.fieldMap["order_status"] = o.OrderStatus
	o.fieldMap["order_type"] = o.OrderType
	o.fieldMap["total"] = o.Total
	o.fieldMap["order_price"] = o.OrderPrice
	o.fieldMap["total_amount"] = o.TotalAmount
	o.fieldMap["filled"] = o.Filled
	o.fieldMap["fill_price"] = o.FillPrice
	o.fieldMap["filled_value"] = o.FilledValue
	o.fieldMap["profit_amount"] = o.ProfitAmount
	o.fieldMap["fee"] = o.Fee
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["filled_at"] = o.FilledAt
	o.fieldMap["canceled_at"] = o.CanceledAt
}

func (o orderSpot) clone(db *gorm.DB) orderSpot {
	o.orderSpotDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderSpot) replaceDB(db *gorm.DB) orderSpot {
	o.orderSpotDo.ReplaceDB(db)
	return o
}

type orderSpotDo struct{ gen.DO }

type IOrderSpotDo interface {
	gen.SubQuery
	Debug() IOrderSpotDo
	WithContext(ctx context.Context) IOrderSpotDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderSpotDo
	WriteDB() IOrderSpotDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderSpotDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderSpotDo
	Not(conds ...gen.Condition) IOrderSpotDo
	Or(conds ...gen.Condition) IOrderSpotDo
	Select(conds ...field.Expr) IOrderSpotDo
	Where(conds ...gen.Condition) IOrderSpotDo
	Order(conds ...field.Expr) IOrderSpotDo
	Distinct(cols ...field.Expr) IOrderSpotDo
	Omit(cols ...field.Expr) IOrderSpotDo
	Join(table schema.Tabler, on ...field.Expr) IOrderSpotDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderSpotDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderSpotDo
	Group(cols ...field.Expr) IOrderSpotDo
	Having(conds ...gen.Condition) IOrderSpotDo
	Limit(limit int) IOrderSpotDo
	Offset(offset int) IOrderSpotDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderSpotDo
	Unscoped() IOrderSpotDo
	Create(values ...*model.OrderSpot) error
	CreateInBatches(values []*model.OrderSpot, batchSize int) error
	Save(values ...*model.OrderSpot) error
	First() (*model.OrderSpot, error)
	Take() (*model.OrderSpot, error)
	Last() (*model.OrderSpot, error)
	Find() ([]*model.OrderSpot, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderSpot, err error)
	FindInBatches(result *[]*model.OrderSpot, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderSpot) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderSpotDo
	Assign(attrs ...field.AssignExpr) IOrderSpotDo
	Joins(fields ...field.RelationField) IOrderSpotDo
	Preload(fields ...field.RelationField) IOrderSpotDo
	FirstOrInit() (*model.OrderSpot, error)
	FirstOrCreate() (*model.OrderSpot, error)
	FindByPage(offset int, limit int) (result []*model.OrderSpot, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderSpotDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderSpotDo) Debug() IOrderSpotDo {
	return o.withDO(o.DO.Debug())
}

func (o orderSpotDo) WithContext(ctx context.Context) IOrderSpotDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderSpotDo) ReadDB() IOrderSpotDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderSpotDo) WriteDB() IOrderSpotDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderSpotDo) Session(config *gorm.Session) IOrderSpotDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderSpotDo) Clauses(conds ...clause.Expression) IOrderSpotDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderSpotDo) Returning(value interface{}, columns ...string) IOrderSpotDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderSpotDo) Not(conds ...gen.Condition) IOrderSpotDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderSpotDo) Or(conds ...gen.Condition) IOrderSpotDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderSpotDo) Select(conds ...field.Expr) IOrderSpotDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderSpotDo) Where(conds ...gen.Condition) IOrderSpotDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderSpotDo) Order(conds ...field.Expr) IOrderSpotDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderSpotDo) Distinct(cols ...field.Expr) IOrderSpotDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderSpotDo) Omit(cols ...field.Expr) IOrderSpotDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderSpotDo) Join(table schema.Tabler, on ...field.Expr) IOrderSpotDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderSpotDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderSpotDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderSpotDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderSpotDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderSpotDo) Group(cols ...field.Expr) IOrderSpotDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderSpotDo) Having(conds ...gen.Condition) IOrderSpotDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderSpotDo) Limit(limit int) IOrderSpotDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderSpotDo) Offset(offset int) IOrderSpotDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderSpotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderSpotDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderSpotDo) Unscoped() IOrderSpotDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderSpotDo) Create(values ...*model.OrderSpot) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderSpotDo) CreateInBatches(values []*model.OrderSpot, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderSpotDo) Save(values ...*model.OrderSpot) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderSpotDo) First() (*model.OrderSpot, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSpot), nil
	}
}

func (o orderSpotDo) Take() (*model.OrderSpot, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSpot), nil
	}
}

func (o orderSpotDo) Last() (*model.OrderSpot, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSpot), nil
	}
}

func (o orderSpotDo) Find() ([]*model.OrderSpot, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderSpot), err
}

func (o orderSpotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderSpot, err error) {
	buf := make([]*model.OrderSpot, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderSpotDo) FindInBatches(result *[]*model.OrderSpot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderSpotDo) Attrs(attrs ...field.AssignExpr) IOrderSpotDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderSpotDo) Assign(attrs ...field.AssignExpr) IOrderSpotDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderSpotDo) Joins(fields ...field.RelationField) IOrderSpotDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderSpotDo) Preload(fields ...field.RelationField) IOrderSpotDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderSpotDo) FirstOrInit() (*model.OrderSpot, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSpot), nil
	}
}

func (o orderSpotDo) FirstOrCreate() (*model.OrderSpot, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSpot), nil
	}
}

func (o orderSpotDo) FindByPage(offset int, limit int) (result []*model.OrderSpot, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderSpotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderSpotDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderSpotDo) Delete(models ...*model.OrderSpot) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderSpotDo) withDO(do gen.Dao) *orderSpotDo {
	o.DO = *do.(*gen.DO)
	return o
}
