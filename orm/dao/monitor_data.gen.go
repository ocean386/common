// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newMonitorDatum(db *gorm.DB, opts ...gen.DOOption) monitorDatum {
	_monitorDatum := monitorDatum{}

	_monitorDatum.monitorDatumDo.UseDB(db, opts...)
	_monitorDatum.monitorDatumDo.UseModel(&model.MonitorDatum{})

	tableName := _monitorDatum.monitorDatumDo.TableName()
	_monitorDatum.ALL = field.NewAsterisk(tableName)
	_monitorDatum.ID = field.NewInt64(tableName, "id")
	_monitorDatum.CurrencyID = field.NewString(tableName, "currency_id")
	_monitorDatum.BarType = field.NewString(tableName, "bar_type")
	_monitorDatum.EmaPrice = field.NewFloat64(tableName, "ema_price")
	_monitorDatum.HighPrice = field.NewFloat64(tableName, "high_price")
	_monitorDatum.LowPrice = field.NewFloat64(tableName, "low_price")
	_monitorDatum.UpdateTime = field.NewInt64(tableName, "update_time")

	_monitorDatum.fillFieldMap()

	return _monitorDatum
}

// monitorDatum 监控行情数据指标表
type monitorDatum struct {
	monitorDatumDo

	ALL        field.Asterisk
	ID         field.Int64   // 主键ID
	CurrencyID field.String  // 币种ID
	BarType    field.String  // 时间粒度类型:默认值1m,1m/5m/15m/30m/1H/4H/12H/1D/1W
	EmaPrice   field.Float64 // 收盘价-指数移动平均线-EMA
	HighPrice  field.Float64 // 最高价格-根据时间粒度
	LowPrice   field.Float64 // 最低价格-根据时间粒度
	UpdateTime field.Int64   // 更新时间

	fieldMap map[string]field.Expr
}

func (m monitorDatum) Table(newTableName string) *monitorDatum {
	m.monitorDatumDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m monitorDatum) As(alias string) *monitorDatum {
	m.monitorDatumDo.DO = *(m.monitorDatumDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *monitorDatum) updateTableName(table string) *monitorDatum {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.CurrencyID = field.NewString(table, "currency_id")
	m.BarType = field.NewString(table, "bar_type")
	m.EmaPrice = field.NewFloat64(table, "ema_price")
	m.HighPrice = field.NewFloat64(table, "high_price")
	m.LowPrice = field.NewFloat64(table, "low_price")
	m.UpdateTime = field.NewInt64(table, "update_time")

	m.fillFieldMap()

	return m
}

func (m *monitorDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *monitorDatum) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["currency_id"] = m.CurrencyID
	m.fieldMap["bar_type"] = m.BarType
	m.fieldMap["ema_price"] = m.EmaPrice
	m.fieldMap["high_price"] = m.HighPrice
	m.fieldMap["low_price"] = m.LowPrice
	m.fieldMap["update_time"] = m.UpdateTime
}

func (m monitorDatum) clone(db *gorm.DB) monitorDatum {
	m.monitorDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m monitorDatum) replaceDB(db *gorm.DB) monitorDatum {
	m.monitorDatumDo.ReplaceDB(db)
	return m
}

type monitorDatumDo struct{ gen.DO }

type IMonitorDatumDo interface {
	gen.SubQuery
	Debug() IMonitorDatumDo
	WithContext(ctx context.Context) IMonitorDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMonitorDatumDo
	WriteDB() IMonitorDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMonitorDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMonitorDatumDo
	Not(conds ...gen.Condition) IMonitorDatumDo
	Or(conds ...gen.Condition) IMonitorDatumDo
	Select(conds ...field.Expr) IMonitorDatumDo
	Where(conds ...gen.Condition) IMonitorDatumDo
	Order(conds ...field.Expr) IMonitorDatumDo
	Distinct(cols ...field.Expr) IMonitorDatumDo
	Omit(cols ...field.Expr) IMonitorDatumDo
	Join(table schema.Tabler, on ...field.Expr) IMonitorDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMonitorDatumDo
	Group(cols ...field.Expr) IMonitorDatumDo
	Having(conds ...gen.Condition) IMonitorDatumDo
	Limit(limit int) IMonitorDatumDo
	Offset(offset int) IMonitorDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorDatumDo
	Unscoped() IMonitorDatumDo
	Create(values ...*model.MonitorDatum) error
	CreateInBatches(values []*model.MonitorDatum, batchSize int) error
	Save(values ...*model.MonitorDatum) error
	First() (*model.MonitorDatum, error)
	Take() (*model.MonitorDatum, error)
	Last() (*model.MonitorDatum, error)
	Find() ([]*model.MonitorDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorDatum, err error)
	FindInBatches(result *[]*model.MonitorDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MonitorDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMonitorDatumDo
	Assign(attrs ...field.AssignExpr) IMonitorDatumDo
	Joins(fields ...field.RelationField) IMonitorDatumDo
	Preload(fields ...field.RelationField) IMonitorDatumDo
	FirstOrInit() (*model.MonitorDatum, error)
	FirstOrCreate() (*model.MonitorDatum, error)
	FindByPage(offset int, limit int) (result []*model.MonitorDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMonitorDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m monitorDatumDo) Debug() IMonitorDatumDo {
	return m.withDO(m.DO.Debug())
}

func (m monitorDatumDo) WithContext(ctx context.Context) IMonitorDatumDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m monitorDatumDo) ReadDB() IMonitorDatumDo {
	return m.Clauses(dbresolver.Read)
}

func (m monitorDatumDo) WriteDB() IMonitorDatumDo {
	return m.Clauses(dbresolver.Write)
}

func (m monitorDatumDo) Session(config *gorm.Session) IMonitorDatumDo {
	return m.withDO(m.DO.Session(config))
}

func (m monitorDatumDo) Clauses(conds ...clause.Expression) IMonitorDatumDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m monitorDatumDo) Returning(value interface{}, columns ...string) IMonitorDatumDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m monitorDatumDo) Not(conds ...gen.Condition) IMonitorDatumDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m monitorDatumDo) Or(conds ...gen.Condition) IMonitorDatumDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m monitorDatumDo) Select(conds ...field.Expr) IMonitorDatumDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m monitorDatumDo) Where(conds ...gen.Condition) IMonitorDatumDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m monitorDatumDo) Order(conds ...field.Expr) IMonitorDatumDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m monitorDatumDo) Distinct(cols ...field.Expr) IMonitorDatumDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m monitorDatumDo) Omit(cols ...field.Expr) IMonitorDatumDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m monitorDatumDo) Join(table schema.Tabler, on ...field.Expr) IMonitorDatumDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m monitorDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMonitorDatumDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m monitorDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IMonitorDatumDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m monitorDatumDo) Group(cols ...field.Expr) IMonitorDatumDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m monitorDatumDo) Having(conds ...gen.Condition) IMonitorDatumDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m monitorDatumDo) Limit(limit int) IMonitorDatumDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m monitorDatumDo) Offset(offset int) IMonitorDatumDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m monitorDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMonitorDatumDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m monitorDatumDo) Unscoped() IMonitorDatumDo {
	return m.withDO(m.DO.Unscoped())
}

func (m monitorDatumDo) Create(values ...*model.MonitorDatum) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m monitorDatumDo) CreateInBatches(values []*model.MonitorDatum, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m monitorDatumDo) Save(values ...*model.MonitorDatum) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m monitorDatumDo) First() (*model.MonitorDatum, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorDatum), nil
	}
}

func (m monitorDatumDo) Take() (*model.MonitorDatum, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorDatum), nil
	}
}

func (m monitorDatumDo) Last() (*model.MonitorDatum, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorDatum), nil
	}
}

func (m monitorDatumDo) Find() ([]*model.MonitorDatum, error) {
	result, err := m.DO.Find()
	return result.([]*model.MonitorDatum), err
}

func (m monitorDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MonitorDatum, err error) {
	buf := make([]*model.MonitorDatum, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m monitorDatumDo) FindInBatches(result *[]*model.MonitorDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m monitorDatumDo) Attrs(attrs ...field.AssignExpr) IMonitorDatumDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m monitorDatumDo) Assign(attrs ...field.AssignExpr) IMonitorDatumDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m monitorDatumDo) Joins(fields ...field.RelationField) IMonitorDatumDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m monitorDatumDo) Preload(fields ...field.RelationField) IMonitorDatumDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m monitorDatumDo) FirstOrInit() (*model.MonitorDatum, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorDatum), nil
	}
}

func (m monitorDatumDo) FirstOrCreate() (*model.MonitorDatum, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MonitorDatum), nil
	}
}

func (m monitorDatumDo) FindByPage(offset int, limit int) (result []*model.MonitorDatum, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m monitorDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m monitorDatumDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m monitorDatumDo) Delete(models ...*model.MonitorDatum) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *monitorDatumDo) withDO(do gen.Dao) *monitorDatumDo {
	m.DO = *do.(*gen.DO)
	return m
}
