// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newSpotGridOrder(db *gorm.DB, opts ...gen.DOOption) spotGridOrder {
	_spotGridOrder := spotGridOrder{}

	_spotGridOrder.spotGridOrderDo.UseDB(db, opts...)
	_spotGridOrder.spotGridOrderDo.UseModel(&model.SpotGridOrder{})

	tableName := _spotGridOrder.spotGridOrderDo.TableName()
	_spotGridOrder.ALL = field.NewAsterisk(tableName)
	_spotGridOrder.ID = field.NewInt64(tableName, "id")
	_spotGridOrder.GridID = field.NewString(tableName, "grid_id")
	_spotGridOrder.OrderCid = field.NewString(tableName, "order_cid")
	_spotGridOrder.OrderPid = field.NewString(tableName, "order_pid")
	_spotGridOrder.UserID = field.NewInt64(tableName, "user_id")
	_spotGridOrder.CurrencyID = field.NewString(tableName, "currency_id")
	_spotGridOrder.Simulation = field.NewInt64(tableName, "simulation")
	_spotGridOrder.BuySellType = field.NewInt64(tableName, "buy_sell_type")
	_spotGridOrder.OrderStatus = field.NewInt64(tableName, "order_status")
	_spotGridOrder.OrderType = field.NewInt64(tableName, "order_type")
	_spotGridOrder.Total = field.NewFloat64(tableName, "total")
	_spotGridOrder.OrderPriceBuy = field.NewFloat64(tableName, "order_price_buy")
	_spotGridOrder.OrderPriceSell = field.NewFloat64(tableName, "order_price_sell")
	_spotGridOrder.TotalAmount = field.NewFloat64(tableName, "total_amount")
	_spotGridOrder.ProfitAmount = field.NewFloat64(tableName, "profit_amount")
	_spotGridOrder.Fee = field.NewFloat64(tableName, "fee")
	_spotGridOrder.CreatedAt = field.NewInt64(tableName, "created_at")
	_spotGridOrder.FilledAt = field.NewInt64(tableName, "filled_at")
	_spotGridOrder.CanceledAt = field.NewInt64(tableName, "canceled_at")

	_spotGridOrder.fillFieldMap()

	return _spotGridOrder
}

// spotGridOrder 网格订单-现货
type spotGridOrder struct {
	spotGridOrderDo

	ALL            field.Asterisk
	ID             field.Int64   // 主键ID
	GridID         field.String  // 网格ID
	OrderCid       field.String  // 客户自定义订单ID
	OrderPid       field.String  // OK平台订单ID
	UserID         field.Int64   // 用户ID
	CurrencyID     field.String  // 币种ID
	Simulation     field.Int64   // 模拟订单: 0-全部,1-否, 2-是
	BuySellType    field.Int64   // 交易方向: 0-全部,1-买入,2-卖出,3-完成买卖
	OrderStatus    field.Int64   // 订单状态:0-全部,1-等待提交,2-已暂停,3-等待成交,4-部分成交,5-买卖成交,6-完全成交,7-已撤销
	OrderType      field.Int64   // 交易类型: 0-全部,1-高级限价,2-限价委托,3-市价委托
	Total          field.Float64 // 交易数量
	OrderPriceBuy  field.Float64 // 交易价格-买入
	OrderPriceSell field.Float64 // 交易价格-卖出
	TotalAmount    field.Float64 // 交易金额
	ProfitAmount   field.Float64 // 盈亏金额
	Fee            field.Float64 // 手续费
	CreatedAt      field.Int64   // 创建时间
	FilledAt       field.Int64   // 成交时间
	CanceledAt     field.Int64   // 撤销时间

	fieldMap map[string]field.Expr
}

func (s spotGridOrder) Table(newTableName string) *spotGridOrder {
	s.spotGridOrderDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spotGridOrder) As(alias string) *spotGridOrder {
	s.spotGridOrderDo.DO = *(s.spotGridOrderDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spotGridOrder) updateTableName(table string) *spotGridOrder {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.GridID = field.NewString(table, "grid_id")
	s.OrderCid = field.NewString(table, "order_cid")
	s.OrderPid = field.NewString(table, "order_pid")
	s.UserID = field.NewInt64(table, "user_id")
	s.CurrencyID = field.NewString(table, "currency_id")
	s.Simulation = field.NewInt64(table, "simulation")
	s.BuySellType = field.NewInt64(table, "buy_sell_type")
	s.OrderStatus = field.NewInt64(table, "order_status")
	s.OrderType = field.NewInt64(table, "order_type")
	s.Total = field.NewFloat64(table, "total")
	s.OrderPriceBuy = field.NewFloat64(table, "order_price_buy")
	s.OrderPriceSell = field.NewFloat64(table, "order_price_sell")
	s.TotalAmount = field.NewFloat64(table, "total_amount")
	s.ProfitAmount = field.NewFloat64(table, "profit_amount")
	s.Fee = field.NewFloat64(table, "fee")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.FilledAt = field.NewInt64(table, "filled_at")
	s.CanceledAt = field.NewInt64(table, "canceled_at")

	s.fillFieldMap()

	return s
}

func (s *spotGridOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spotGridOrder) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 19)
	s.fieldMap["id"] = s.ID
	s.fieldMap["grid_id"] = s.GridID
	s.fieldMap["order_cid"] = s.OrderCid
	s.fieldMap["order_pid"] = s.OrderPid
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["currency_id"] = s.CurrencyID
	s.fieldMap["simulation"] = s.Simulation
	s.fieldMap["buy_sell_type"] = s.BuySellType
	s.fieldMap["order_status"] = s.OrderStatus
	s.fieldMap["order_type"] = s.OrderType
	s.fieldMap["total"] = s.Total
	s.fieldMap["order_price_buy"] = s.OrderPriceBuy
	s.fieldMap["order_price_sell"] = s.OrderPriceSell
	s.fieldMap["total_amount"] = s.TotalAmount
	s.fieldMap["profit_amount"] = s.ProfitAmount
	s.fieldMap["fee"] = s.Fee
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["filled_at"] = s.FilledAt
	s.fieldMap["canceled_at"] = s.CanceledAt
}

func (s spotGridOrder) clone(db *gorm.DB) spotGridOrder {
	s.spotGridOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spotGridOrder) replaceDB(db *gorm.DB) spotGridOrder {
	s.spotGridOrderDo.ReplaceDB(db)
	return s
}

type spotGridOrderDo struct{ gen.DO }

type ISpotGridOrderDo interface {
	gen.SubQuery
	Debug() ISpotGridOrderDo
	WithContext(ctx context.Context) ISpotGridOrderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpotGridOrderDo
	WriteDB() ISpotGridOrderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpotGridOrderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpotGridOrderDo
	Not(conds ...gen.Condition) ISpotGridOrderDo
	Or(conds ...gen.Condition) ISpotGridOrderDo
	Select(conds ...field.Expr) ISpotGridOrderDo
	Where(conds ...gen.Condition) ISpotGridOrderDo
	Order(conds ...field.Expr) ISpotGridOrderDo
	Distinct(cols ...field.Expr) ISpotGridOrderDo
	Omit(cols ...field.Expr) ISpotGridOrderDo
	Join(table schema.Tabler, on ...field.Expr) ISpotGridOrderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpotGridOrderDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpotGridOrderDo
	Group(cols ...field.Expr) ISpotGridOrderDo
	Having(conds ...gen.Condition) ISpotGridOrderDo
	Limit(limit int) ISpotGridOrderDo
	Offset(offset int) ISpotGridOrderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpotGridOrderDo
	Unscoped() ISpotGridOrderDo
	Create(values ...*model.SpotGridOrder) error
	CreateInBatches(values []*model.SpotGridOrder, batchSize int) error
	Save(values ...*model.SpotGridOrder) error
	First() (*model.SpotGridOrder, error)
	Take() (*model.SpotGridOrder, error)
	Last() (*model.SpotGridOrder, error)
	Find() ([]*model.SpotGridOrder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpotGridOrder, err error)
	FindInBatches(result *[]*model.SpotGridOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SpotGridOrder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpotGridOrderDo
	Assign(attrs ...field.AssignExpr) ISpotGridOrderDo
	Joins(fields ...field.RelationField) ISpotGridOrderDo
	Preload(fields ...field.RelationField) ISpotGridOrderDo
	FirstOrInit() (*model.SpotGridOrder, error)
	FirstOrCreate() (*model.SpotGridOrder, error)
	FindByPage(offset int, limit int) (result []*model.SpotGridOrder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpotGridOrderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spotGridOrderDo) Debug() ISpotGridOrderDo {
	return s.withDO(s.DO.Debug())
}

func (s spotGridOrderDo) WithContext(ctx context.Context) ISpotGridOrderDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spotGridOrderDo) ReadDB() ISpotGridOrderDo {
	return s.Clauses(dbresolver.Read)
}

func (s spotGridOrderDo) WriteDB() ISpotGridOrderDo {
	return s.Clauses(dbresolver.Write)
}

func (s spotGridOrderDo) Session(config *gorm.Session) ISpotGridOrderDo {
	return s.withDO(s.DO.Session(config))
}

func (s spotGridOrderDo) Clauses(conds ...clause.Expression) ISpotGridOrderDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spotGridOrderDo) Returning(value interface{}, columns ...string) ISpotGridOrderDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spotGridOrderDo) Not(conds ...gen.Condition) ISpotGridOrderDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spotGridOrderDo) Or(conds ...gen.Condition) ISpotGridOrderDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spotGridOrderDo) Select(conds ...field.Expr) ISpotGridOrderDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spotGridOrderDo) Where(conds ...gen.Condition) ISpotGridOrderDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spotGridOrderDo) Order(conds ...field.Expr) ISpotGridOrderDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spotGridOrderDo) Distinct(cols ...field.Expr) ISpotGridOrderDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spotGridOrderDo) Omit(cols ...field.Expr) ISpotGridOrderDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spotGridOrderDo) Join(table schema.Tabler, on ...field.Expr) ISpotGridOrderDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spotGridOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpotGridOrderDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spotGridOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpotGridOrderDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spotGridOrderDo) Group(cols ...field.Expr) ISpotGridOrderDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spotGridOrderDo) Having(conds ...gen.Condition) ISpotGridOrderDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spotGridOrderDo) Limit(limit int) ISpotGridOrderDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spotGridOrderDo) Offset(offset int) ISpotGridOrderDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spotGridOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpotGridOrderDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spotGridOrderDo) Unscoped() ISpotGridOrderDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spotGridOrderDo) Create(values ...*model.SpotGridOrder) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spotGridOrderDo) CreateInBatches(values []*model.SpotGridOrder, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spotGridOrderDo) Save(values ...*model.SpotGridOrder) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spotGridOrderDo) First() (*model.SpotGridOrder, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpotGridOrder), nil
	}
}

func (s spotGridOrderDo) Take() (*model.SpotGridOrder, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpotGridOrder), nil
	}
}

func (s spotGridOrderDo) Last() (*model.SpotGridOrder, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpotGridOrder), nil
	}
}

func (s spotGridOrderDo) Find() ([]*model.SpotGridOrder, error) {
	result, err := s.DO.Find()
	return result.([]*model.SpotGridOrder), err
}

func (s spotGridOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpotGridOrder, err error) {
	buf := make([]*model.SpotGridOrder, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spotGridOrderDo) FindInBatches(result *[]*model.SpotGridOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spotGridOrderDo) Attrs(attrs ...field.AssignExpr) ISpotGridOrderDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spotGridOrderDo) Assign(attrs ...field.AssignExpr) ISpotGridOrderDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spotGridOrderDo) Joins(fields ...field.RelationField) ISpotGridOrderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spotGridOrderDo) Preload(fields ...field.RelationField) ISpotGridOrderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spotGridOrderDo) FirstOrInit() (*model.SpotGridOrder, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpotGridOrder), nil
	}
}

func (s spotGridOrderDo) FirstOrCreate() (*model.SpotGridOrder, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpotGridOrder), nil
	}
}

func (s spotGridOrderDo) FindByPage(offset int, limit int) (result []*model.SpotGridOrder, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spotGridOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spotGridOrderDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spotGridOrderDo) Delete(models ...*model.SpotGridOrder) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spotGridOrderDo) withDO(do gen.Dao) *spotGridOrderDo {
	s.DO = *do.(*gen.DO)
	return s
}
