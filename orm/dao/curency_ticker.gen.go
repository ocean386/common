// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newCurencyTicker(db *gorm.DB, opts ...gen.DOOption) curencyTicker {
	_curencyTicker := curencyTicker{}

	_curencyTicker.curencyTickerDo.UseDB(db, opts...)
	_curencyTicker.curencyTickerDo.UseModel(&model.CurencyTicker{})

	tableName := _curencyTicker.curencyTickerDo.TableName()
	_curencyTicker.ALL = field.NewAsterisk(tableName)
	_curencyTicker.ID = field.NewInt64(tableName, "id")
	_curencyTicker.CurrencyID = field.NewString(tableName, "currency_id")
	_curencyTicker.Status = field.NewInt64(tableName, "status")
	_curencyTicker.Spot = field.NewInt64(tableName, "spot")
	_curencyTicker.CreatedAt = field.NewInt64(tableName, "created_at")
	_curencyTicker.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_curencyTicker.fillFieldMap()

	return _curencyTicker
}

// curencyTicker 行情数据-订阅币种表
type curencyTicker struct {
	curencyTickerDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键ID
	CurrencyID field.String // 币种ID
	Status     field.Int64  // 订阅状态: 0-未订阅 1-已订阅
	Spot       field.Int64  // 订阅状态: 0-现货 1-合约
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (c curencyTicker) Table(newTableName string) *curencyTicker {
	c.curencyTickerDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c curencyTicker) As(alias string) *curencyTicker {
	c.curencyTickerDo.DO = *(c.curencyTickerDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *curencyTicker) updateTableName(table string) *curencyTicker {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CurrencyID = field.NewString(table, "currency_id")
	c.Status = field.NewInt64(table, "status")
	c.Spot = field.NewInt64(table, "spot")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.UpdatedAt = field.NewInt64(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *curencyTicker) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *curencyTicker) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["currency_id"] = c.CurrencyID
	c.fieldMap["status"] = c.Status
	c.fieldMap["spot"] = c.Spot
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c curencyTicker) clone(db *gorm.DB) curencyTicker {
	c.curencyTickerDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c curencyTicker) replaceDB(db *gorm.DB) curencyTicker {
	c.curencyTickerDo.ReplaceDB(db)
	return c
}

type curencyTickerDo struct{ gen.DO }

type ICurencyTickerDo interface {
	gen.SubQuery
	Debug() ICurencyTickerDo
	WithContext(ctx context.Context) ICurencyTickerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICurencyTickerDo
	WriteDB() ICurencyTickerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICurencyTickerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICurencyTickerDo
	Not(conds ...gen.Condition) ICurencyTickerDo
	Or(conds ...gen.Condition) ICurencyTickerDo
	Select(conds ...field.Expr) ICurencyTickerDo
	Where(conds ...gen.Condition) ICurencyTickerDo
	Order(conds ...field.Expr) ICurencyTickerDo
	Distinct(cols ...field.Expr) ICurencyTickerDo
	Omit(cols ...field.Expr) ICurencyTickerDo
	Join(table schema.Tabler, on ...field.Expr) ICurencyTickerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICurencyTickerDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICurencyTickerDo
	Group(cols ...field.Expr) ICurencyTickerDo
	Having(conds ...gen.Condition) ICurencyTickerDo
	Limit(limit int) ICurencyTickerDo
	Offset(offset int) ICurencyTickerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICurencyTickerDo
	Unscoped() ICurencyTickerDo
	Create(values ...*model.CurencyTicker) error
	CreateInBatches(values []*model.CurencyTicker, batchSize int) error
	Save(values ...*model.CurencyTicker) error
	First() (*model.CurencyTicker, error)
	Take() (*model.CurencyTicker, error)
	Last() (*model.CurencyTicker, error)
	Find() ([]*model.CurencyTicker, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CurencyTicker, err error)
	FindInBatches(result *[]*model.CurencyTicker, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CurencyTicker) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICurencyTickerDo
	Assign(attrs ...field.AssignExpr) ICurencyTickerDo
	Joins(fields ...field.RelationField) ICurencyTickerDo
	Preload(fields ...field.RelationField) ICurencyTickerDo
	FirstOrInit() (*model.CurencyTicker, error)
	FirstOrCreate() (*model.CurencyTicker, error)
	FindByPage(offset int, limit int) (result []*model.CurencyTicker, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICurencyTickerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c curencyTickerDo) Debug() ICurencyTickerDo {
	return c.withDO(c.DO.Debug())
}

func (c curencyTickerDo) WithContext(ctx context.Context) ICurencyTickerDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c curencyTickerDo) ReadDB() ICurencyTickerDo {
	return c.Clauses(dbresolver.Read)
}

func (c curencyTickerDo) WriteDB() ICurencyTickerDo {
	return c.Clauses(dbresolver.Write)
}

func (c curencyTickerDo) Session(config *gorm.Session) ICurencyTickerDo {
	return c.withDO(c.DO.Session(config))
}

func (c curencyTickerDo) Clauses(conds ...clause.Expression) ICurencyTickerDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c curencyTickerDo) Returning(value interface{}, columns ...string) ICurencyTickerDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c curencyTickerDo) Not(conds ...gen.Condition) ICurencyTickerDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c curencyTickerDo) Or(conds ...gen.Condition) ICurencyTickerDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c curencyTickerDo) Select(conds ...field.Expr) ICurencyTickerDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c curencyTickerDo) Where(conds ...gen.Condition) ICurencyTickerDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c curencyTickerDo) Order(conds ...field.Expr) ICurencyTickerDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c curencyTickerDo) Distinct(cols ...field.Expr) ICurencyTickerDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c curencyTickerDo) Omit(cols ...field.Expr) ICurencyTickerDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c curencyTickerDo) Join(table schema.Tabler, on ...field.Expr) ICurencyTickerDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c curencyTickerDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICurencyTickerDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c curencyTickerDo) RightJoin(table schema.Tabler, on ...field.Expr) ICurencyTickerDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c curencyTickerDo) Group(cols ...field.Expr) ICurencyTickerDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c curencyTickerDo) Having(conds ...gen.Condition) ICurencyTickerDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c curencyTickerDo) Limit(limit int) ICurencyTickerDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c curencyTickerDo) Offset(offset int) ICurencyTickerDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c curencyTickerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICurencyTickerDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c curencyTickerDo) Unscoped() ICurencyTickerDo {
	return c.withDO(c.DO.Unscoped())
}

func (c curencyTickerDo) Create(values ...*model.CurencyTicker) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c curencyTickerDo) CreateInBatches(values []*model.CurencyTicker, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c curencyTickerDo) Save(values ...*model.CurencyTicker) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c curencyTickerDo) First() (*model.CurencyTicker, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurencyTicker), nil
	}
}

func (c curencyTickerDo) Take() (*model.CurencyTicker, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurencyTicker), nil
	}
}

func (c curencyTickerDo) Last() (*model.CurencyTicker, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurencyTicker), nil
	}
}

func (c curencyTickerDo) Find() ([]*model.CurencyTicker, error) {
	result, err := c.DO.Find()
	return result.([]*model.CurencyTicker), err
}

func (c curencyTickerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CurencyTicker, err error) {
	buf := make([]*model.CurencyTicker, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c curencyTickerDo) FindInBatches(result *[]*model.CurencyTicker, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c curencyTickerDo) Attrs(attrs ...field.AssignExpr) ICurencyTickerDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c curencyTickerDo) Assign(attrs ...field.AssignExpr) ICurencyTickerDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c curencyTickerDo) Joins(fields ...field.RelationField) ICurencyTickerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c curencyTickerDo) Preload(fields ...field.RelationField) ICurencyTickerDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c curencyTickerDo) FirstOrInit() (*model.CurencyTicker, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurencyTicker), nil
	}
}

func (c curencyTickerDo) FirstOrCreate() (*model.CurencyTicker, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CurencyTicker), nil
	}
}

func (c curencyTickerDo) FindByPage(offset int, limit int) (result []*model.CurencyTicker, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c curencyTickerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c curencyTickerDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c curencyTickerDo) Delete(models ...*model.CurencyTicker) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *curencyTickerDo) withDO(do gen.Dao) *curencyTickerDo {
	c.DO = *do.(*gen.DO)
	return c
}
