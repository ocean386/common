// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newOrderEvent(db *gorm.DB, opts ...gen.DOOption) orderEvent {
	_orderEvent := orderEvent{}

	_orderEvent.orderEventDo.UseDB(db, opts...)
	_orderEvent.orderEventDo.UseModel(&model.OrderEvent{})

	tableName := _orderEvent.orderEventDo.TableName()
	_orderEvent.ALL = field.NewAsterisk(tableName)
	_orderEvent.ID = field.NewInt64(tableName, "id")
	_orderEvent.OrderCid = field.NewString(tableName, "order_cid")
	_orderEvent.OrderPid = field.NewString(tableName, "order_pid")
	_orderEvent.CurrencyID = field.NewString(tableName, "currency_id")
	_orderEvent.Simulation = field.NewInt64(tableName, "simulation")
	_orderEvent.OrderStatus = field.NewInt64(tableName, "order_status")
	_orderEvent.Filled = field.NewFloat64(tableName, "filled")
	_orderEvent.FillPrice = field.NewFloat64(tableName, "fill_price")
	_orderEvent.Fee = field.NewFloat64(tableName, "fee")
	_orderEvent.FilledAt = field.NewInt64(tableName, "filled_at")
	_orderEvent.TableName_ = field.NewString(tableName, "table_name")

	_orderEvent.fillFieldMap()

	return _orderEvent
}

// orderEvent 订单成交事件
type orderEvent struct {
	orderEventDo

	ALL         field.Asterisk
	ID          field.Int64   // 主键ID
	OrderCid    field.String  // 客户自定义订单ID
	OrderPid    field.String  // OK平台订单ID
	CurrencyID  field.String  // 币种ID
	Simulation  field.Int64   // 模拟订单: 0-全部,1-否, 2-是
	OrderStatus field.Int64   // 订单状态:
	Filled      field.Float64 // 交易数量
	FillPrice   field.Float64 // 交易价格
	Fee         field.Float64 // 手续费
	FilledAt    field.Int64   // 成交时间
	TableName_  field.String  // 订单所对应表名

	fieldMap map[string]field.Expr
}

func (o orderEvent) Table(newTableName string) *orderEvent {
	o.orderEventDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderEvent) As(alias string) *orderEvent {
	o.orderEventDo.DO = *(o.orderEventDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderEvent) updateTableName(table string) *orderEvent {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderCid = field.NewString(table, "order_cid")
	o.OrderPid = field.NewString(table, "order_pid")
	o.CurrencyID = field.NewString(table, "currency_id")
	o.Simulation = field.NewInt64(table, "simulation")
	o.OrderStatus = field.NewInt64(table, "order_status")
	o.Filled = field.NewFloat64(table, "filled")
	o.FillPrice = field.NewFloat64(table, "fill_price")
	o.Fee = field.NewFloat64(table, "fee")
	o.FilledAt = field.NewInt64(table, "filled_at")
	o.TableName_ = field.NewString(table, "table_name")

	o.fillFieldMap()

	return o
}

func (o *orderEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderEvent) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_cid"] = o.OrderCid
	o.fieldMap["order_pid"] = o.OrderPid
	o.fieldMap["currency_id"] = o.CurrencyID
	o.fieldMap["simulation"] = o.Simulation
	o.fieldMap["order_status"] = o.OrderStatus
	o.fieldMap["filled"] = o.Filled
	o.fieldMap["fill_price"] = o.FillPrice
	o.fieldMap["fee"] = o.Fee
	o.fieldMap["filled_at"] = o.FilledAt
	o.fieldMap["table_name"] = o.TableName_
}

func (o orderEvent) clone(db *gorm.DB) orderEvent {
	o.orderEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderEvent) replaceDB(db *gorm.DB) orderEvent {
	o.orderEventDo.ReplaceDB(db)
	return o
}

type orderEventDo struct{ gen.DO }

type IOrderEventDo interface {
	gen.SubQuery
	Debug() IOrderEventDo
	WithContext(ctx context.Context) IOrderEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderEventDo
	WriteDB() IOrderEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderEventDo
	Not(conds ...gen.Condition) IOrderEventDo
	Or(conds ...gen.Condition) IOrderEventDo
	Select(conds ...field.Expr) IOrderEventDo
	Where(conds ...gen.Condition) IOrderEventDo
	Order(conds ...field.Expr) IOrderEventDo
	Distinct(cols ...field.Expr) IOrderEventDo
	Omit(cols ...field.Expr) IOrderEventDo
	Join(table schema.Tabler, on ...field.Expr) IOrderEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderEventDo
	Group(cols ...field.Expr) IOrderEventDo
	Having(conds ...gen.Condition) IOrderEventDo
	Limit(limit int) IOrderEventDo
	Offset(offset int) IOrderEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderEventDo
	Unscoped() IOrderEventDo
	Create(values ...*model.OrderEvent) error
	CreateInBatches(values []*model.OrderEvent, batchSize int) error
	Save(values ...*model.OrderEvent) error
	First() (*model.OrderEvent, error)
	Take() (*model.OrderEvent, error)
	Last() (*model.OrderEvent, error)
	Find() ([]*model.OrderEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderEvent, err error)
	FindInBatches(result *[]*model.OrderEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderEventDo
	Assign(attrs ...field.AssignExpr) IOrderEventDo
	Joins(fields ...field.RelationField) IOrderEventDo
	Preload(fields ...field.RelationField) IOrderEventDo
	FirstOrInit() (*model.OrderEvent, error)
	FirstOrCreate() (*model.OrderEvent, error)
	FindByPage(offset int, limit int) (result []*model.OrderEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderEventDo) Debug() IOrderEventDo {
	return o.withDO(o.DO.Debug())
}

func (o orderEventDo) WithContext(ctx context.Context) IOrderEventDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderEventDo) ReadDB() IOrderEventDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderEventDo) WriteDB() IOrderEventDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderEventDo) Session(config *gorm.Session) IOrderEventDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderEventDo) Clauses(conds ...clause.Expression) IOrderEventDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderEventDo) Returning(value interface{}, columns ...string) IOrderEventDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderEventDo) Not(conds ...gen.Condition) IOrderEventDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderEventDo) Or(conds ...gen.Condition) IOrderEventDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderEventDo) Select(conds ...field.Expr) IOrderEventDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderEventDo) Where(conds ...gen.Condition) IOrderEventDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderEventDo) Order(conds ...field.Expr) IOrderEventDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderEventDo) Distinct(cols ...field.Expr) IOrderEventDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderEventDo) Omit(cols ...field.Expr) IOrderEventDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderEventDo) Join(table schema.Tabler, on ...field.Expr) IOrderEventDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderEventDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderEventDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderEventDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderEventDo) Group(cols ...field.Expr) IOrderEventDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderEventDo) Having(conds ...gen.Condition) IOrderEventDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderEventDo) Limit(limit int) IOrderEventDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderEventDo) Offset(offset int) IOrderEventDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderEventDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderEventDo) Unscoped() IOrderEventDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderEventDo) Create(values ...*model.OrderEvent) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderEventDo) CreateInBatches(values []*model.OrderEvent, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderEventDo) Save(values ...*model.OrderEvent) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderEventDo) First() (*model.OrderEvent, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEvent), nil
	}
}

func (o orderEventDo) Take() (*model.OrderEvent, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEvent), nil
	}
}

func (o orderEventDo) Last() (*model.OrderEvent, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEvent), nil
	}
}

func (o orderEventDo) Find() ([]*model.OrderEvent, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderEvent), err
}

func (o orderEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderEvent, err error) {
	buf := make([]*model.OrderEvent, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderEventDo) FindInBatches(result *[]*model.OrderEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderEventDo) Attrs(attrs ...field.AssignExpr) IOrderEventDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderEventDo) Assign(attrs ...field.AssignExpr) IOrderEventDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderEventDo) Joins(fields ...field.RelationField) IOrderEventDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderEventDo) Preload(fields ...field.RelationField) IOrderEventDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderEventDo) FirstOrInit() (*model.OrderEvent, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEvent), nil
	}
}

func (o orderEventDo) FirstOrCreate() (*model.OrderEvent, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEvent), nil
	}
}

func (o orderEventDo) FindByPage(offset int, limit int) (result []*model.OrderEvent, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderEventDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderEventDo) Delete(models ...*model.OrderEvent) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderEventDo) withDO(do gen.Dao) *orderEventDo {
	o.DO = *do.(*gen.DO)
	return o
}
