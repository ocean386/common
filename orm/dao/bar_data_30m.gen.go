// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newBarData30m(db *gorm.DB, opts ...gen.DOOption) barData30m {
	_barData30m := barData30m{}

	_barData30m.barData30mDo.UseDB(db, opts...)
	_barData30m.barData30mDo.UseModel(&model.BarData30m{})

	tableName := _barData30m.barData30mDo.TableName()
	_barData30m.ALL = field.NewAsterisk(tableName)
	_barData30m.ID = field.NewInt64(tableName, "id")
	_barData30m.CurrencyID = field.NewString(tableName, "currency_id")
	_barData30m.BeginTime = field.NewInt64(tableName, "begin_time")
	_barData30m.OpenPrice = field.NewFloat64(tableName, "open_price")
	_barData30m.ClosePrice = field.NewFloat64(tableName, "close_price")
	_barData30m.HighPrice = field.NewFloat64(tableName, "high_price")
	_barData30m.LowPrice = field.NewFloat64(tableName, "low_price")
	_barData30m.BarType = field.NewString(tableName, "bar_type")
	_barData30m.SigType = field.NewInt64(tableName, "sig_type")
	_barData30m.PriceChange = field.NewFloat64(tableName, "price_change")
	_barData30m.PriceRange = field.NewFloat64(tableName, "price_range")
	_barData30m.PriceRangePrecent = field.NewFloat64(tableName, "price_range_precent")
	_barData30m.TriggerTime = field.NewInt64(tableName, "trigger_time")

	_barData30m.fillFieldMap()

	return _barData30m
}

// barData30m 时间粒度表-每30分钟
type barData30m struct {
	barData30mDo

	ALL               field.Asterisk
	ID                field.Int64   // 主键ID
	CurrencyID        field.String  // 币种ID
	BeginTime         field.Int64   // 开始时间
	OpenPrice         field.Float64 // 开盘价格
	ClosePrice        field.Float64 // 收盘价格
	HighPrice         field.Float64 // 最高价格
	LowPrice          field.Float64 // 最低价格
	BarType           field.String  // 时间粒度类型:默认值1m,1m/5m/15m/30m/1H/4H/12H/1D/1W/1M
	SigType           field.Int64   // 行情信号: 0-/, 1-上涨, 2-快速上涨, 3-爆涨, 4-下跌, 5-快速下跌, 6-爆跌
	PriceChange       field.Float64 // 涨跌幅度
	PriceRange        field.Float64 // 涨跌振幅
	PriceRangePrecent field.Float64 // 涨跌振幅比例
	TriggerTime       field.Int64   // 触发时间

	fieldMap map[string]field.Expr
}

func (b barData30m) Table(newTableName string) *barData30m {
	b.barData30mDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b barData30m) As(alias string) *barData30m {
	b.barData30mDo.DO = *(b.barData30mDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *barData30m) updateTableName(table string) *barData30m {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CurrencyID = field.NewString(table, "currency_id")
	b.BeginTime = field.NewInt64(table, "begin_time")
	b.OpenPrice = field.NewFloat64(table, "open_price")
	b.ClosePrice = field.NewFloat64(table, "close_price")
	b.HighPrice = field.NewFloat64(table, "high_price")
	b.LowPrice = field.NewFloat64(table, "low_price")
	b.BarType = field.NewString(table, "bar_type")
	b.SigType = field.NewInt64(table, "sig_type")
	b.PriceChange = field.NewFloat64(table, "price_change")
	b.PriceRange = field.NewFloat64(table, "price_range")
	b.PriceRangePrecent = field.NewFloat64(table, "price_range_precent")
	b.TriggerTime = field.NewInt64(table, "trigger_time")

	b.fillFieldMap()

	return b
}

func (b *barData30m) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *barData30m) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["id"] = b.ID
	b.fieldMap["currency_id"] = b.CurrencyID
	b.fieldMap["begin_time"] = b.BeginTime
	b.fieldMap["open_price"] = b.OpenPrice
	b.fieldMap["close_price"] = b.ClosePrice
	b.fieldMap["high_price"] = b.HighPrice
	b.fieldMap["low_price"] = b.LowPrice
	b.fieldMap["bar_type"] = b.BarType
	b.fieldMap["sig_type"] = b.SigType
	b.fieldMap["price_change"] = b.PriceChange
	b.fieldMap["price_range"] = b.PriceRange
	b.fieldMap["price_range_precent"] = b.PriceRangePrecent
	b.fieldMap["trigger_time"] = b.TriggerTime
}

func (b barData30m) clone(db *gorm.DB) barData30m {
	b.barData30mDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b barData30m) replaceDB(db *gorm.DB) barData30m {
	b.barData30mDo.ReplaceDB(db)
	return b
}

type barData30mDo struct{ gen.DO }

type IBarData30mDo interface {
	gen.SubQuery
	Debug() IBarData30mDo
	WithContext(ctx context.Context) IBarData30mDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBarData30mDo
	WriteDB() IBarData30mDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBarData30mDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBarData30mDo
	Not(conds ...gen.Condition) IBarData30mDo
	Or(conds ...gen.Condition) IBarData30mDo
	Select(conds ...field.Expr) IBarData30mDo
	Where(conds ...gen.Condition) IBarData30mDo
	Order(conds ...field.Expr) IBarData30mDo
	Distinct(cols ...field.Expr) IBarData30mDo
	Omit(cols ...field.Expr) IBarData30mDo
	Join(table schema.Tabler, on ...field.Expr) IBarData30mDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBarData30mDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBarData30mDo
	Group(cols ...field.Expr) IBarData30mDo
	Having(conds ...gen.Condition) IBarData30mDo
	Limit(limit int) IBarData30mDo
	Offset(offset int) IBarData30mDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBarData30mDo
	Unscoped() IBarData30mDo
	Create(values ...*model.BarData30m) error
	CreateInBatches(values []*model.BarData30m, batchSize int) error
	Save(values ...*model.BarData30m) error
	First() (*model.BarData30m, error)
	Take() (*model.BarData30m, error)
	Last() (*model.BarData30m, error)
	Find() ([]*model.BarData30m, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BarData30m, err error)
	FindInBatches(result *[]*model.BarData30m, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BarData30m) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBarData30mDo
	Assign(attrs ...field.AssignExpr) IBarData30mDo
	Joins(fields ...field.RelationField) IBarData30mDo
	Preload(fields ...field.RelationField) IBarData30mDo
	FirstOrInit() (*model.BarData30m, error)
	FirstOrCreate() (*model.BarData30m, error)
	FindByPage(offset int, limit int) (result []*model.BarData30m, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBarData30mDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b barData30mDo) Debug() IBarData30mDo {
	return b.withDO(b.DO.Debug())
}

func (b barData30mDo) WithContext(ctx context.Context) IBarData30mDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b barData30mDo) ReadDB() IBarData30mDo {
	return b.Clauses(dbresolver.Read)
}

func (b barData30mDo) WriteDB() IBarData30mDo {
	return b.Clauses(dbresolver.Write)
}

func (b barData30mDo) Session(config *gorm.Session) IBarData30mDo {
	return b.withDO(b.DO.Session(config))
}

func (b barData30mDo) Clauses(conds ...clause.Expression) IBarData30mDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b barData30mDo) Returning(value interface{}, columns ...string) IBarData30mDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b barData30mDo) Not(conds ...gen.Condition) IBarData30mDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b barData30mDo) Or(conds ...gen.Condition) IBarData30mDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b barData30mDo) Select(conds ...field.Expr) IBarData30mDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b barData30mDo) Where(conds ...gen.Condition) IBarData30mDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b barData30mDo) Order(conds ...field.Expr) IBarData30mDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b barData30mDo) Distinct(cols ...field.Expr) IBarData30mDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b barData30mDo) Omit(cols ...field.Expr) IBarData30mDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b barData30mDo) Join(table schema.Tabler, on ...field.Expr) IBarData30mDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b barData30mDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBarData30mDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b barData30mDo) RightJoin(table schema.Tabler, on ...field.Expr) IBarData30mDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b barData30mDo) Group(cols ...field.Expr) IBarData30mDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b barData30mDo) Having(conds ...gen.Condition) IBarData30mDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b barData30mDo) Limit(limit int) IBarData30mDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b barData30mDo) Offset(offset int) IBarData30mDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b barData30mDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBarData30mDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b barData30mDo) Unscoped() IBarData30mDo {
	return b.withDO(b.DO.Unscoped())
}

func (b barData30mDo) Create(values ...*model.BarData30m) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b barData30mDo) CreateInBatches(values []*model.BarData30m, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b barData30mDo) Save(values ...*model.BarData30m) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b barData30mDo) First() (*model.BarData30m, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData30m), nil
	}
}

func (b barData30mDo) Take() (*model.BarData30m, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData30m), nil
	}
}

func (b barData30mDo) Last() (*model.BarData30m, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData30m), nil
	}
}

func (b barData30mDo) Find() ([]*model.BarData30m, error) {
	result, err := b.DO.Find()
	return result.([]*model.BarData30m), err
}

func (b barData30mDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BarData30m, err error) {
	buf := make([]*model.BarData30m, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b barData30mDo) FindInBatches(result *[]*model.BarData30m, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b barData30mDo) Attrs(attrs ...field.AssignExpr) IBarData30mDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b barData30mDo) Assign(attrs ...field.AssignExpr) IBarData30mDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b barData30mDo) Joins(fields ...field.RelationField) IBarData30mDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b barData30mDo) Preload(fields ...field.RelationField) IBarData30mDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b barData30mDo) FirstOrInit() (*model.BarData30m, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData30m), nil
	}
}

func (b barData30mDo) FirstOrCreate() (*model.BarData30m, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData30m), nil
	}
}

func (b barData30mDo) FindByPage(offset int, limit int) (result []*model.BarData30m, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b barData30mDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b barData30mDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b barData30mDo) Delete(models ...*model.BarData30m) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *barData30mDo) withDO(do gen.Dao) *barData30mDo {
	b.DO = *do.(*gen.DO)
	return b
}
