// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newBarData4h(db *gorm.DB, opts ...gen.DOOption) barData4h {
	_barData4h := barData4h{}

	_barData4h.barData4hDo.UseDB(db, opts...)
	_barData4h.barData4hDo.UseModel(&model.BarData4h{})

	tableName := _barData4h.barData4hDo.TableName()
	_barData4h.ALL = field.NewAsterisk(tableName)
	_barData4h.ID = field.NewInt64(tableName, "id")
	_barData4h.CurrencyID = field.NewString(tableName, "currency_id")
	_barData4h.BeginTime = field.NewInt64(tableName, "begin_time")
	_barData4h.OpenPrice = field.NewFloat64(tableName, "open_price")
	_barData4h.ClosePrice = field.NewFloat64(tableName, "close_price")
	_barData4h.HighPrice = field.NewFloat64(tableName, "high_price")
	_barData4h.LowPrice = field.NewFloat64(tableName, "low_price")
	_barData4h.BarType = field.NewString(tableName, "bar_type")
	_barData4h.SigType = field.NewInt64(tableName, "sig_type")
	_barData4h.PriceChange = field.NewFloat64(tableName, "price_change")
	_barData4h.PriceRange = field.NewFloat64(tableName, "price_range")
	_barData4h.PriceRangePrecent = field.NewFloat64(tableName, "price_range_precent")
	_barData4h.TriggerTime = field.NewInt64(tableName, "trigger_time")

	_barData4h.fillFieldMap()

	return _barData4h
}

// barData4h 时间粒度表-每4小时
type barData4h struct {
	barData4hDo

	ALL               field.Asterisk
	ID                field.Int64   // 主键ID
	CurrencyID        field.String  // 币种ID
	BeginTime         field.Int64   // 开始时间
	OpenPrice         field.Float64 // 开盘价格
	ClosePrice        field.Float64 // 收盘价格
	HighPrice         field.Float64 // 最高价格
	LowPrice          field.Float64 // 最低价格
	BarType           field.String  // 时间粒度类型:默认值1m,1m/5m/15m/30m/1H/4H/12H/1D/1W/1M
	SigType           field.Int64   // 行情信号: 0-/, 1-上涨, 2-快速上涨, 3-爆涨, 4-下跌, 5-快速下跌, 6-爆跌
	PriceChange       field.Float64 // 涨跌幅度
	PriceRange        field.Float64 // 涨跌振幅
	PriceRangePrecent field.Float64 // 涨跌振幅比例
	TriggerTime       field.Int64   // 触发时间

	fieldMap map[string]field.Expr
}

func (b barData4h) Table(newTableName string) *barData4h {
	b.barData4hDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b barData4h) As(alias string) *barData4h {
	b.barData4hDo.DO = *(b.barData4hDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *barData4h) updateTableName(table string) *barData4h {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.CurrencyID = field.NewString(table, "currency_id")
	b.BeginTime = field.NewInt64(table, "begin_time")
	b.OpenPrice = field.NewFloat64(table, "open_price")
	b.ClosePrice = field.NewFloat64(table, "close_price")
	b.HighPrice = field.NewFloat64(table, "high_price")
	b.LowPrice = field.NewFloat64(table, "low_price")
	b.BarType = field.NewString(table, "bar_type")
	b.SigType = field.NewInt64(table, "sig_type")
	b.PriceChange = field.NewFloat64(table, "price_change")
	b.PriceRange = field.NewFloat64(table, "price_range")
	b.PriceRangePrecent = field.NewFloat64(table, "price_range_precent")
	b.TriggerTime = field.NewInt64(table, "trigger_time")

	b.fillFieldMap()

	return b
}

func (b *barData4h) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *barData4h) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["id"] = b.ID
	b.fieldMap["currency_id"] = b.CurrencyID
	b.fieldMap["begin_time"] = b.BeginTime
	b.fieldMap["open_price"] = b.OpenPrice
	b.fieldMap["close_price"] = b.ClosePrice
	b.fieldMap["high_price"] = b.HighPrice
	b.fieldMap["low_price"] = b.LowPrice
	b.fieldMap["bar_type"] = b.BarType
	b.fieldMap["sig_type"] = b.SigType
	b.fieldMap["price_change"] = b.PriceChange
	b.fieldMap["price_range"] = b.PriceRange
	b.fieldMap["price_range_precent"] = b.PriceRangePrecent
	b.fieldMap["trigger_time"] = b.TriggerTime
}

func (b barData4h) clone(db *gorm.DB) barData4h {
	b.barData4hDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b barData4h) replaceDB(db *gorm.DB) barData4h {
	b.barData4hDo.ReplaceDB(db)
	return b
}

type barData4hDo struct{ gen.DO }

type IBarData4hDo interface {
	gen.SubQuery
	Debug() IBarData4hDo
	WithContext(ctx context.Context) IBarData4hDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBarData4hDo
	WriteDB() IBarData4hDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBarData4hDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBarData4hDo
	Not(conds ...gen.Condition) IBarData4hDo
	Or(conds ...gen.Condition) IBarData4hDo
	Select(conds ...field.Expr) IBarData4hDo
	Where(conds ...gen.Condition) IBarData4hDo
	Order(conds ...field.Expr) IBarData4hDo
	Distinct(cols ...field.Expr) IBarData4hDo
	Omit(cols ...field.Expr) IBarData4hDo
	Join(table schema.Tabler, on ...field.Expr) IBarData4hDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBarData4hDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBarData4hDo
	Group(cols ...field.Expr) IBarData4hDo
	Having(conds ...gen.Condition) IBarData4hDo
	Limit(limit int) IBarData4hDo
	Offset(offset int) IBarData4hDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBarData4hDo
	Unscoped() IBarData4hDo
	Create(values ...*model.BarData4h) error
	CreateInBatches(values []*model.BarData4h, batchSize int) error
	Save(values ...*model.BarData4h) error
	First() (*model.BarData4h, error)
	Take() (*model.BarData4h, error)
	Last() (*model.BarData4h, error)
	Find() ([]*model.BarData4h, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BarData4h, err error)
	FindInBatches(result *[]*model.BarData4h, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BarData4h) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBarData4hDo
	Assign(attrs ...field.AssignExpr) IBarData4hDo
	Joins(fields ...field.RelationField) IBarData4hDo
	Preload(fields ...field.RelationField) IBarData4hDo
	FirstOrInit() (*model.BarData4h, error)
	FirstOrCreate() (*model.BarData4h, error)
	FindByPage(offset int, limit int) (result []*model.BarData4h, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBarData4hDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b barData4hDo) Debug() IBarData4hDo {
	return b.withDO(b.DO.Debug())
}

func (b barData4hDo) WithContext(ctx context.Context) IBarData4hDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b barData4hDo) ReadDB() IBarData4hDo {
	return b.Clauses(dbresolver.Read)
}

func (b barData4hDo) WriteDB() IBarData4hDo {
	return b.Clauses(dbresolver.Write)
}

func (b barData4hDo) Session(config *gorm.Session) IBarData4hDo {
	return b.withDO(b.DO.Session(config))
}

func (b barData4hDo) Clauses(conds ...clause.Expression) IBarData4hDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b barData4hDo) Returning(value interface{}, columns ...string) IBarData4hDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b barData4hDo) Not(conds ...gen.Condition) IBarData4hDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b barData4hDo) Or(conds ...gen.Condition) IBarData4hDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b barData4hDo) Select(conds ...field.Expr) IBarData4hDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b barData4hDo) Where(conds ...gen.Condition) IBarData4hDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b barData4hDo) Order(conds ...field.Expr) IBarData4hDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b barData4hDo) Distinct(cols ...field.Expr) IBarData4hDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b barData4hDo) Omit(cols ...field.Expr) IBarData4hDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b barData4hDo) Join(table schema.Tabler, on ...field.Expr) IBarData4hDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b barData4hDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBarData4hDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b barData4hDo) RightJoin(table schema.Tabler, on ...field.Expr) IBarData4hDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b barData4hDo) Group(cols ...field.Expr) IBarData4hDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b barData4hDo) Having(conds ...gen.Condition) IBarData4hDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b barData4hDo) Limit(limit int) IBarData4hDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b barData4hDo) Offset(offset int) IBarData4hDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b barData4hDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBarData4hDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b barData4hDo) Unscoped() IBarData4hDo {
	return b.withDO(b.DO.Unscoped())
}

func (b barData4hDo) Create(values ...*model.BarData4h) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b barData4hDo) CreateInBatches(values []*model.BarData4h, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b barData4hDo) Save(values ...*model.BarData4h) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b barData4hDo) First() (*model.BarData4h, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData4h), nil
	}
}

func (b barData4hDo) Take() (*model.BarData4h, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData4h), nil
	}
}

func (b barData4hDo) Last() (*model.BarData4h, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData4h), nil
	}
}

func (b barData4hDo) Find() ([]*model.BarData4h, error) {
	result, err := b.DO.Find()
	return result.([]*model.BarData4h), err
}

func (b barData4hDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BarData4h, err error) {
	buf := make([]*model.BarData4h, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b barData4hDo) FindInBatches(result *[]*model.BarData4h, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b barData4hDo) Attrs(attrs ...field.AssignExpr) IBarData4hDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b barData4hDo) Assign(attrs ...field.AssignExpr) IBarData4hDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b barData4hDo) Joins(fields ...field.RelationField) IBarData4hDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b barData4hDo) Preload(fields ...field.RelationField) IBarData4hDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b barData4hDo) FirstOrInit() (*model.BarData4h, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData4h), nil
	}
}

func (b barData4hDo) FirstOrCreate() (*model.BarData4h, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BarData4h), nil
	}
}

func (b barData4hDo) FindByPage(offset int, limit int) (result []*model.BarData4h, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b barData4hDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b barData4hDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b barData4hDo) Delete(models ...*model.BarData4h) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *barData4hDo) withDO(do gen.Dao) *barData4hDo {
	b.DO = *do.(*gen.DO)
	return b
}
