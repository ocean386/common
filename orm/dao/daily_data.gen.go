// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/orm/model"
)

func newDailyDatum(db *gorm.DB, opts ...gen.DOOption) dailyDatum {
	_dailyDatum := dailyDatum{}

	_dailyDatum.dailyDatumDo.UseDB(db, opts...)
	_dailyDatum.dailyDatumDo.UseModel(&model.DailyDatum{})

	tableName := _dailyDatum.dailyDatumDo.TableName()
	_dailyDatum.ALL = field.NewAsterisk(tableName)
	_dailyDatum.ID = field.NewInt64(tableName, "id")
	_dailyDatum.CurrencyID = field.NewString(tableName, "currency_id")
	_dailyDatum.OpenPrice = field.NewFloat64(tableName, "open_price")
	_dailyDatum.ClosePrice = field.NewFloat64(tableName, "close_price")
	_dailyDatum.HighPrice = field.NewFloat64(tableName, "high_price")
	_dailyDatum.LowPrice = field.NewFloat64(tableName, "low_price")
	_dailyDatum.Volume24h = field.NewInt64(tableName, "volume24h")
	_dailyDatum.Timestamp = field.NewInt64(tableName, "timestamp")
	_dailyDatum.SigType = field.NewInt64(tableName, "sig_type")
	_dailyDatum.PriceChange = field.NewFloat64(tableName, "price_change")
	_dailyDatum.PriceRange = field.NewFloat64(tableName, "price_range")
	_dailyDatum.PriceRangePrecent = field.NewFloat64(tableName, "price_range_precent")
	_dailyDatum.TriggerTime = field.NewInt64(tableName, "trigger_time")
	_dailyDatum.CreateTime = field.NewInt64(tableName, "create_time")
	_dailyDatum.ProductType = field.NewString(tableName, "product_type")

	_dailyDatum.fillFieldMap()

	return _dailyDatum
}

// dailyDatum 虚拟币历史数据表
type dailyDatum struct {
	dailyDatumDo

	ALL               field.Asterisk
	ID                field.Int64   // 主键ID
	CurrencyID        field.String  // 币种ID
	OpenPrice         field.Float64 // 开盘价格-亚洲
	ClosePrice        field.Float64 // 最新成交价格|每日最终收盘价格
	HighPrice         field.Float64 // 最高价
	LowPrice          field.Float64 // 最低价
	Volume24h         field.Int64   // 24小时成交量-千亿规模
	Timestamp         field.Int64   // 时间戳
	SigType           field.Int64   // 行情信号:0-/,1-上涨,2-快速上涨,3-爆涨,4-下跌,5-快速下跌,6-爆跌
	PriceChange       field.Float64 // 涨跌幅度
	PriceRange        field.Float64 // 涨跌振幅
	PriceRangePrecent field.Float64 // 涨跌振幅比例
	TriggerTime       field.Int64   // 触发时间
	CreateTime        field.Int64   // 插入记录-时间
	ProductType       field.String  // 产品类型: 默认值SPOT

	fieldMap map[string]field.Expr
}

func (d dailyDatum) Table(newTableName string) *dailyDatum {
	d.dailyDatumDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dailyDatum) As(alias string) *dailyDatum {
	d.dailyDatumDo.DO = *(d.dailyDatumDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dailyDatum) updateTableName(table string) *dailyDatum {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CurrencyID = field.NewString(table, "currency_id")
	d.OpenPrice = field.NewFloat64(table, "open_price")
	d.ClosePrice = field.NewFloat64(table, "close_price")
	d.HighPrice = field.NewFloat64(table, "high_price")
	d.LowPrice = field.NewFloat64(table, "low_price")
	d.Volume24h = field.NewInt64(table, "volume24h")
	d.Timestamp = field.NewInt64(table, "timestamp")
	d.SigType = field.NewInt64(table, "sig_type")
	d.PriceChange = field.NewFloat64(table, "price_change")
	d.PriceRange = field.NewFloat64(table, "price_range")
	d.PriceRangePrecent = field.NewFloat64(table, "price_range_precent")
	d.TriggerTime = field.NewInt64(table, "trigger_time")
	d.CreateTime = field.NewInt64(table, "create_time")
	d.ProductType = field.NewString(table, "product_type")

	d.fillFieldMap()

	return d
}

func (d *dailyDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dailyDatum) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["id"] = d.ID
	d.fieldMap["currency_id"] = d.CurrencyID
	d.fieldMap["open_price"] = d.OpenPrice
	d.fieldMap["close_price"] = d.ClosePrice
	d.fieldMap["high_price"] = d.HighPrice
	d.fieldMap["low_price"] = d.LowPrice
	d.fieldMap["volume24h"] = d.Volume24h
	d.fieldMap["timestamp"] = d.Timestamp
	d.fieldMap["sig_type"] = d.SigType
	d.fieldMap["price_change"] = d.PriceChange
	d.fieldMap["price_range"] = d.PriceRange
	d.fieldMap["price_range_precent"] = d.PriceRangePrecent
	d.fieldMap["trigger_time"] = d.TriggerTime
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["product_type"] = d.ProductType
}

func (d dailyDatum) clone(db *gorm.DB) dailyDatum {
	d.dailyDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dailyDatum) replaceDB(db *gorm.DB) dailyDatum {
	d.dailyDatumDo.ReplaceDB(db)
	return d
}

type dailyDatumDo struct{ gen.DO }

type IDailyDatumDo interface {
	gen.SubQuery
	Debug() IDailyDatumDo
	WithContext(ctx context.Context) IDailyDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDailyDatumDo
	WriteDB() IDailyDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDailyDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDailyDatumDo
	Not(conds ...gen.Condition) IDailyDatumDo
	Or(conds ...gen.Condition) IDailyDatumDo
	Select(conds ...field.Expr) IDailyDatumDo
	Where(conds ...gen.Condition) IDailyDatumDo
	Order(conds ...field.Expr) IDailyDatumDo
	Distinct(cols ...field.Expr) IDailyDatumDo
	Omit(cols ...field.Expr) IDailyDatumDo
	Join(table schema.Tabler, on ...field.Expr) IDailyDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDailyDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDailyDatumDo
	Group(cols ...field.Expr) IDailyDatumDo
	Having(conds ...gen.Condition) IDailyDatumDo
	Limit(limit int) IDailyDatumDo
	Offset(offset int) IDailyDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyDatumDo
	Unscoped() IDailyDatumDo
	Create(values ...*model.DailyDatum) error
	CreateInBatches(values []*model.DailyDatum, batchSize int) error
	Save(values ...*model.DailyDatum) error
	First() (*model.DailyDatum, error)
	Take() (*model.DailyDatum, error)
	Last() (*model.DailyDatum, error)
	Find() ([]*model.DailyDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyDatum, err error)
	FindInBatches(result *[]*model.DailyDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DailyDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDailyDatumDo
	Assign(attrs ...field.AssignExpr) IDailyDatumDo
	Joins(fields ...field.RelationField) IDailyDatumDo
	Preload(fields ...field.RelationField) IDailyDatumDo
	FirstOrInit() (*model.DailyDatum, error)
	FirstOrCreate() (*model.DailyDatum, error)
	FindByPage(offset int, limit int) (result []*model.DailyDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDailyDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dailyDatumDo) Debug() IDailyDatumDo {
	return d.withDO(d.DO.Debug())
}

func (d dailyDatumDo) WithContext(ctx context.Context) IDailyDatumDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dailyDatumDo) ReadDB() IDailyDatumDo {
	return d.Clauses(dbresolver.Read)
}

func (d dailyDatumDo) WriteDB() IDailyDatumDo {
	return d.Clauses(dbresolver.Write)
}

func (d dailyDatumDo) Session(config *gorm.Session) IDailyDatumDo {
	return d.withDO(d.DO.Session(config))
}

func (d dailyDatumDo) Clauses(conds ...clause.Expression) IDailyDatumDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dailyDatumDo) Returning(value interface{}, columns ...string) IDailyDatumDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dailyDatumDo) Not(conds ...gen.Condition) IDailyDatumDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dailyDatumDo) Or(conds ...gen.Condition) IDailyDatumDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dailyDatumDo) Select(conds ...field.Expr) IDailyDatumDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dailyDatumDo) Where(conds ...gen.Condition) IDailyDatumDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dailyDatumDo) Order(conds ...field.Expr) IDailyDatumDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dailyDatumDo) Distinct(cols ...field.Expr) IDailyDatumDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dailyDatumDo) Omit(cols ...field.Expr) IDailyDatumDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dailyDatumDo) Join(table schema.Tabler, on ...field.Expr) IDailyDatumDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dailyDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDailyDatumDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dailyDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IDailyDatumDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dailyDatumDo) Group(cols ...field.Expr) IDailyDatumDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dailyDatumDo) Having(conds ...gen.Condition) IDailyDatumDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dailyDatumDo) Limit(limit int) IDailyDatumDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dailyDatumDo) Offset(offset int) IDailyDatumDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dailyDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDailyDatumDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dailyDatumDo) Unscoped() IDailyDatumDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dailyDatumDo) Create(values ...*model.DailyDatum) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dailyDatumDo) CreateInBatches(values []*model.DailyDatum, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dailyDatumDo) Save(values ...*model.DailyDatum) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dailyDatumDo) First() (*model.DailyDatum, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyDatum), nil
	}
}

func (d dailyDatumDo) Take() (*model.DailyDatum, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyDatum), nil
	}
}

func (d dailyDatumDo) Last() (*model.DailyDatum, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyDatum), nil
	}
}

func (d dailyDatumDo) Find() ([]*model.DailyDatum, error) {
	result, err := d.DO.Find()
	return result.([]*model.DailyDatum), err
}

func (d dailyDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DailyDatum, err error) {
	buf := make([]*model.DailyDatum, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dailyDatumDo) FindInBatches(result *[]*model.DailyDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dailyDatumDo) Attrs(attrs ...field.AssignExpr) IDailyDatumDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dailyDatumDo) Assign(attrs ...field.AssignExpr) IDailyDatumDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dailyDatumDo) Joins(fields ...field.RelationField) IDailyDatumDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dailyDatumDo) Preload(fields ...field.RelationField) IDailyDatumDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dailyDatumDo) FirstOrInit() (*model.DailyDatum, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyDatum), nil
	}
}

func (d dailyDatumDo) FirstOrCreate() (*model.DailyDatum, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DailyDatum), nil
	}
}

func (d dailyDatumDo) FindByPage(offset int, limit int) (result []*model.DailyDatum, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dailyDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dailyDatumDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dailyDatumDo) Delete(models ...*model.DailyDatum) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dailyDatumDo) withDO(do gen.Dao) *dailyDatumDo {
	d.DO = *do.(*gen.DO)
	return d
}
