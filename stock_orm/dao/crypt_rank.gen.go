// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/stock_orm/model"
)

func newCryptRank(db *gorm.DB, opts ...gen.DOOption) cryptRank {
	_cryptRank := cryptRank{}

	_cryptRank.cryptRankDo.UseDB(db, opts...)
	_cryptRank.cryptRankDo.UseModel(&model.CryptRank{})

	tableName := _cryptRank.cryptRankDo.TableName()
	_cryptRank.ALL = field.NewAsterisk(tableName)
	_cryptRank.ID = field.NewInt64(tableName, "id")
	_cryptRank.CryptName = field.NewString(tableName, "crypt_name")
	_cryptRank.RankType = field.NewInt64(tableName, "rank_type")
	_cryptRank.CryptPrice = field.NewFloat64(tableName, "crypt_price")
	_cryptRank.CryptValue = field.NewFloat64(tableName, "crypt_value")
	_cryptRank.Volume24h = field.NewFloat64(tableName, "volume_24h")
	_cryptRank.TurnOver24h = field.NewFloat64(tableName, "turn_over_24h")
	_cryptRank.RankID = field.NewInt64(tableName, "rank_id")
	_cryptRank.CreatedAt = field.NewTime(tableName, "created_at")
	_cryptRank.UpdatedAt = field.NewTime(tableName, "updated_at")

	_cryptRank.fillFieldMap()

	return _cryptRank
}

// cryptRank 虚拟币排行榜
type cryptRank struct {
	cryptRankDo

	ALL         field.Asterisk
	ID          field.Int64   // 主键ID
	CryptName   field.String  // 虚拟币名称
	RankType    field.Int64   // 排行榜类型: 0-全部 1-热门榜 2-涨幅榜 3-跌幅榜 4-新币榜 5-飙升榜 6-市值榜 7-成交榜
	CryptPrice  field.Float64 // 价格
	CryptValue  field.Float64 // 涨跌幅度
	Volume24h   field.Float64 // 成交量-24小时
	TurnOver24h field.Float64 // 成交金额-24小时
	RankID      field.Int64   // 排名ID
	CreatedAt   field.Time    // 创建时间
	UpdatedAt   field.Time    // 更新时间

	fieldMap map[string]field.Expr
}

func (c cryptRank) Table(newTableName string) *cryptRank {
	c.cryptRankDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cryptRank) As(alias string) *cryptRank {
	c.cryptRankDo.DO = *(c.cryptRankDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cryptRank) updateTableName(table string) *cryptRank {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CryptName = field.NewString(table, "crypt_name")
	c.RankType = field.NewInt64(table, "rank_type")
	c.CryptPrice = field.NewFloat64(table, "crypt_price")
	c.CryptValue = field.NewFloat64(table, "crypt_value")
	c.Volume24h = field.NewFloat64(table, "volume_24h")
	c.TurnOver24h = field.NewFloat64(table, "turn_over_24h")
	c.RankID = field.NewInt64(table, "rank_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cryptRank) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cryptRank) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["crypt_name"] = c.CryptName
	c.fieldMap["rank_type"] = c.RankType
	c.fieldMap["crypt_price"] = c.CryptPrice
	c.fieldMap["crypt_value"] = c.CryptValue
	c.fieldMap["volume_24h"] = c.Volume24h
	c.fieldMap["turn_over_24h"] = c.TurnOver24h
	c.fieldMap["rank_id"] = c.RankID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cryptRank) clone(db *gorm.DB) cryptRank {
	c.cryptRankDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cryptRank) replaceDB(db *gorm.DB) cryptRank {
	c.cryptRankDo.ReplaceDB(db)
	return c
}

type cryptRankDo struct{ gen.DO }

type ICryptRankDo interface {
	gen.SubQuery
	Debug() ICryptRankDo
	WithContext(ctx context.Context) ICryptRankDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICryptRankDo
	WriteDB() ICryptRankDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICryptRankDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICryptRankDo
	Not(conds ...gen.Condition) ICryptRankDo
	Or(conds ...gen.Condition) ICryptRankDo
	Select(conds ...field.Expr) ICryptRankDo
	Where(conds ...gen.Condition) ICryptRankDo
	Order(conds ...field.Expr) ICryptRankDo
	Distinct(cols ...field.Expr) ICryptRankDo
	Omit(cols ...field.Expr) ICryptRankDo
	Join(table schema.Tabler, on ...field.Expr) ICryptRankDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICryptRankDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICryptRankDo
	Group(cols ...field.Expr) ICryptRankDo
	Having(conds ...gen.Condition) ICryptRankDo
	Limit(limit int) ICryptRankDo
	Offset(offset int) ICryptRankDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICryptRankDo
	Unscoped() ICryptRankDo
	Create(values ...*model.CryptRank) error
	CreateInBatches(values []*model.CryptRank, batchSize int) error
	Save(values ...*model.CryptRank) error
	First() (*model.CryptRank, error)
	Take() (*model.CryptRank, error)
	Last() (*model.CryptRank, error)
	Find() ([]*model.CryptRank, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CryptRank, err error)
	FindInBatches(result *[]*model.CryptRank, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CryptRank) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICryptRankDo
	Assign(attrs ...field.AssignExpr) ICryptRankDo
	Joins(fields ...field.RelationField) ICryptRankDo
	Preload(fields ...field.RelationField) ICryptRankDo
	FirstOrInit() (*model.CryptRank, error)
	FirstOrCreate() (*model.CryptRank, error)
	FindByPage(offset int, limit int) (result []*model.CryptRank, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICryptRankDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cryptRankDo) Debug() ICryptRankDo {
	return c.withDO(c.DO.Debug())
}

func (c cryptRankDo) WithContext(ctx context.Context) ICryptRankDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cryptRankDo) ReadDB() ICryptRankDo {
	return c.Clauses(dbresolver.Read)
}

func (c cryptRankDo) WriteDB() ICryptRankDo {
	return c.Clauses(dbresolver.Write)
}

func (c cryptRankDo) Session(config *gorm.Session) ICryptRankDo {
	return c.withDO(c.DO.Session(config))
}

func (c cryptRankDo) Clauses(conds ...clause.Expression) ICryptRankDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cryptRankDo) Returning(value interface{}, columns ...string) ICryptRankDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cryptRankDo) Not(conds ...gen.Condition) ICryptRankDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cryptRankDo) Or(conds ...gen.Condition) ICryptRankDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cryptRankDo) Select(conds ...field.Expr) ICryptRankDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cryptRankDo) Where(conds ...gen.Condition) ICryptRankDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cryptRankDo) Order(conds ...field.Expr) ICryptRankDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cryptRankDo) Distinct(cols ...field.Expr) ICryptRankDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cryptRankDo) Omit(cols ...field.Expr) ICryptRankDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cryptRankDo) Join(table schema.Tabler, on ...field.Expr) ICryptRankDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cryptRankDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICryptRankDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cryptRankDo) RightJoin(table schema.Tabler, on ...field.Expr) ICryptRankDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cryptRankDo) Group(cols ...field.Expr) ICryptRankDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cryptRankDo) Having(conds ...gen.Condition) ICryptRankDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cryptRankDo) Limit(limit int) ICryptRankDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cryptRankDo) Offset(offset int) ICryptRankDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cryptRankDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICryptRankDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cryptRankDo) Unscoped() ICryptRankDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cryptRankDo) Create(values ...*model.CryptRank) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cryptRankDo) CreateInBatches(values []*model.CryptRank, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cryptRankDo) Save(values ...*model.CryptRank) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cryptRankDo) First() (*model.CryptRank, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptRank), nil
	}
}

func (c cryptRankDo) Take() (*model.CryptRank, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptRank), nil
	}
}

func (c cryptRankDo) Last() (*model.CryptRank, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptRank), nil
	}
}

func (c cryptRankDo) Find() ([]*model.CryptRank, error) {
	result, err := c.DO.Find()
	return result.([]*model.CryptRank), err
}

func (c cryptRankDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CryptRank, err error) {
	buf := make([]*model.CryptRank, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cryptRankDo) FindInBatches(result *[]*model.CryptRank, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cryptRankDo) Attrs(attrs ...field.AssignExpr) ICryptRankDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cryptRankDo) Assign(attrs ...field.AssignExpr) ICryptRankDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cryptRankDo) Joins(fields ...field.RelationField) ICryptRankDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cryptRankDo) Preload(fields ...field.RelationField) ICryptRankDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cryptRankDo) FirstOrInit() (*model.CryptRank, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptRank), nil
	}
}

func (c cryptRankDo) FirstOrCreate() (*model.CryptRank, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptRank), nil
	}
}

func (c cryptRankDo) FindByPage(offset int, limit int) (result []*model.CryptRank, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cryptRankDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cryptRankDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cryptRankDo) Delete(models ...*model.CryptRank) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cryptRankDo) withDO(do gen.Dao) *cryptRankDo {
	c.DO = *do.(*gen.DO)
	return c
}
