// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ocean386/common/stock_orm/model"
)

func newCryptMarket(db *gorm.DB, opts ...gen.DOOption) cryptMarket {
	_cryptMarket := cryptMarket{}

	_cryptMarket.cryptMarketDo.UseDB(db, opts...)
	_cryptMarket.cryptMarketDo.UseModel(&model.CryptMarket{})

	tableName := _cryptMarket.cryptMarketDo.TableName()
	_cryptMarket.ALL = field.NewAsterisk(tableName)
	_cryptMarket.ID = field.NewInt64(tableName, "id")
	_cryptMarket.CryptName = field.NewString(tableName, "crypt_name")
	_cryptMarket.EventType = field.NewInt64(tableName, "event_type")
	_cryptMarket.TriggerPrice = field.NewFloat64(tableName, "trigger_price")
	_cryptMarket.TriggerValue = field.NewFloat64(tableName, "trigger_value")
	_cryptMarket.VolumeUsd = field.NewFloat64(tableName, "volume_usd")
	_cryptMarket.TriggerTime = field.NewTime(tableName, "trigger_time")
	_cryptMarket.RankType1 = field.NewInt64(tableName, "rank_type_1")
	_cryptMarket.RankType2 = field.NewInt64(tableName, "rank_type_2")
	_cryptMarket.RankType3 = field.NewInt64(tableName, "rank_type_3")
	_cryptMarket.RankType4 = field.NewInt64(tableName, "rank_type_4")
	_cryptMarket.RankType5 = field.NewInt64(tableName, "rank_type_5")
	_cryptMarket.RankType6 = field.NewInt64(tableName, "rank_type_6")
	_cryptMarket.RankType7 = field.NewInt64(tableName, "rank_type_7")

	_cryptMarket.fillFieldMap()

	return _cryptMarket
}

// cryptMarket 虚拟币市场异动
type cryptMarket struct {
	cryptMarketDo

	ALL          field.Asterisk
	ID           field.Int64   // 主键ID
	CryptName    field.String  // 虚拟币名称
	EventType    field.Int64   // 市场类型: 0-全部 1-5分钟涨幅 2-5分钟跌幅 3-大单买入 4-大单卖出 5-异动涨幅 6-异动跌幅
	TriggerPrice field.Float64 // 触发价格
	TriggerValue field.Float64 // 涨跌幅度/成交量
	VolumeUsd    field.Float64 // 成交金额
	TriggerTime  field.Time    // 触发时间
	RankType1    field.Int64   // 热门榜
	RankType2    field.Int64   // 涨幅榜
	RankType3    field.Int64   // 跌幅榜
	RankType4    field.Int64   // 市值榜
	RankType5    field.Int64   // 成交榜
	RankType6    field.Int64   // 飙升榜
	RankType7    field.Int64   // 新币榜

	fieldMap map[string]field.Expr
}

func (c cryptMarket) Table(newTableName string) *cryptMarket {
	c.cryptMarketDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cryptMarket) As(alias string) *cryptMarket {
	c.cryptMarketDo.DO = *(c.cryptMarketDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cryptMarket) updateTableName(table string) *cryptMarket {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.CryptName = field.NewString(table, "crypt_name")
	c.EventType = field.NewInt64(table, "event_type")
	c.TriggerPrice = field.NewFloat64(table, "trigger_price")
	c.TriggerValue = field.NewFloat64(table, "trigger_value")
	c.VolumeUsd = field.NewFloat64(table, "volume_usd")
	c.TriggerTime = field.NewTime(table, "trigger_time")
	c.RankType1 = field.NewInt64(table, "rank_type_1")
	c.RankType2 = field.NewInt64(table, "rank_type_2")
	c.RankType3 = field.NewInt64(table, "rank_type_3")
	c.RankType4 = field.NewInt64(table, "rank_type_4")
	c.RankType5 = field.NewInt64(table, "rank_type_5")
	c.RankType6 = field.NewInt64(table, "rank_type_6")
	c.RankType7 = field.NewInt64(table, "rank_type_7")

	c.fillFieldMap()

	return c
}

func (c *cryptMarket) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cryptMarket) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["crypt_name"] = c.CryptName
	c.fieldMap["event_type"] = c.EventType
	c.fieldMap["trigger_price"] = c.TriggerPrice
	c.fieldMap["trigger_value"] = c.TriggerValue
	c.fieldMap["volume_usd"] = c.VolumeUsd
	c.fieldMap["trigger_time"] = c.TriggerTime
	c.fieldMap["rank_type_1"] = c.RankType1
	c.fieldMap["rank_type_2"] = c.RankType2
	c.fieldMap["rank_type_3"] = c.RankType3
	c.fieldMap["rank_type_4"] = c.RankType4
	c.fieldMap["rank_type_5"] = c.RankType5
	c.fieldMap["rank_type_6"] = c.RankType6
	c.fieldMap["rank_type_7"] = c.RankType7
}

func (c cryptMarket) clone(db *gorm.DB) cryptMarket {
	c.cryptMarketDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cryptMarket) replaceDB(db *gorm.DB) cryptMarket {
	c.cryptMarketDo.ReplaceDB(db)
	return c
}

type cryptMarketDo struct{ gen.DO }

type ICryptMarketDo interface {
	gen.SubQuery
	Debug() ICryptMarketDo
	WithContext(ctx context.Context) ICryptMarketDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICryptMarketDo
	WriteDB() ICryptMarketDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICryptMarketDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICryptMarketDo
	Not(conds ...gen.Condition) ICryptMarketDo
	Or(conds ...gen.Condition) ICryptMarketDo
	Select(conds ...field.Expr) ICryptMarketDo
	Where(conds ...gen.Condition) ICryptMarketDo
	Order(conds ...field.Expr) ICryptMarketDo
	Distinct(cols ...field.Expr) ICryptMarketDo
	Omit(cols ...field.Expr) ICryptMarketDo
	Join(table schema.Tabler, on ...field.Expr) ICryptMarketDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICryptMarketDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICryptMarketDo
	Group(cols ...field.Expr) ICryptMarketDo
	Having(conds ...gen.Condition) ICryptMarketDo
	Limit(limit int) ICryptMarketDo
	Offset(offset int) ICryptMarketDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICryptMarketDo
	Unscoped() ICryptMarketDo
	Create(values ...*model.CryptMarket) error
	CreateInBatches(values []*model.CryptMarket, batchSize int) error
	Save(values ...*model.CryptMarket) error
	First() (*model.CryptMarket, error)
	Take() (*model.CryptMarket, error)
	Last() (*model.CryptMarket, error)
	Find() ([]*model.CryptMarket, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CryptMarket, err error)
	FindInBatches(result *[]*model.CryptMarket, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CryptMarket) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICryptMarketDo
	Assign(attrs ...field.AssignExpr) ICryptMarketDo
	Joins(fields ...field.RelationField) ICryptMarketDo
	Preload(fields ...field.RelationField) ICryptMarketDo
	FirstOrInit() (*model.CryptMarket, error)
	FirstOrCreate() (*model.CryptMarket, error)
	FindByPage(offset int, limit int) (result []*model.CryptMarket, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICryptMarketDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cryptMarketDo) Debug() ICryptMarketDo {
	return c.withDO(c.DO.Debug())
}

func (c cryptMarketDo) WithContext(ctx context.Context) ICryptMarketDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cryptMarketDo) ReadDB() ICryptMarketDo {
	return c.Clauses(dbresolver.Read)
}

func (c cryptMarketDo) WriteDB() ICryptMarketDo {
	return c.Clauses(dbresolver.Write)
}

func (c cryptMarketDo) Session(config *gorm.Session) ICryptMarketDo {
	return c.withDO(c.DO.Session(config))
}

func (c cryptMarketDo) Clauses(conds ...clause.Expression) ICryptMarketDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cryptMarketDo) Returning(value interface{}, columns ...string) ICryptMarketDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cryptMarketDo) Not(conds ...gen.Condition) ICryptMarketDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cryptMarketDo) Or(conds ...gen.Condition) ICryptMarketDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cryptMarketDo) Select(conds ...field.Expr) ICryptMarketDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cryptMarketDo) Where(conds ...gen.Condition) ICryptMarketDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cryptMarketDo) Order(conds ...field.Expr) ICryptMarketDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cryptMarketDo) Distinct(cols ...field.Expr) ICryptMarketDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cryptMarketDo) Omit(cols ...field.Expr) ICryptMarketDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cryptMarketDo) Join(table schema.Tabler, on ...field.Expr) ICryptMarketDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cryptMarketDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICryptMarketDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cryptMarketDo) RightJoin(table schema.Tabler, on ...field.Expr) ICryptMarketDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cryptMarketDo) Group(cols ...field.Expr) ICryptMarketDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cryptMarketDo) Having(conds ...gen.Condition) ICryptMarketDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cryptMarketDo) Limit(limit int) ICryptMarketDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cryptMarketDo) Offset(offset int) ICryptMarketDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cryptMarketDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICryptMarketDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cryptMarketDo) Unscoped() ICryptMarketDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cryptMarketDo) Create(values ...*model.CryptMarket) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cryptMarketDo) CreateInBatches(values []*model.CryptMarket, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cryptMarketDo) Save(values ...*model.CryptMarket) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cryptMarketDo) First() (*model.CryptMarket, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptMarket), nil
	}
}

func (c cryptMarketDo) Take() (*model.CryptMarket, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptMarket), nil
	}
}

func (c cryptMarketDo) Last() (*model.CryptMarket, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptMarket), nil
	}
}

func (c cryptMarketDo) Find() ([]*model.CryptMarket, error) {
	result, err := c.DO.Find()
	return result.([]*model.CryptMarket), err
}

func (c cryptMarketDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CryptMarket, err error) {
	buf := make([]*model.CryptMarket, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cryptMarketDo) FindInBatches(result *[]*model.CryptMarket, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cryptMarketDo) Attrs(attrs ...field.AssignExpr) ICryptMarketDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cryptMarketDo) Assign(attrs ...field.AssignExpr) ICryptMarketDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cryptMarketDo) Joins(fields ...field.RelationField) ICryptMarketDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cryptMarketDo) Preload(fields ...field.RelationField) ICryptMarketDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cryptMarketDo) FirstOrInit() (*model.CryptMarket, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptMarket), nil
	}
}

func (c cryptMarketDo) FirstOrCreate() (*model.CryptMarket, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CryptMarket), nil
	}
}

func (c cryptMarketDo) FindByPage(offset int, limit int) (result []*model.CryptMarket, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cryptMarketDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cryptMarketDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cryptMarketDo) Delete(models ...*model.CryptMarket) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cryptMarketDo) withDO(do gen.Dao) *cryptMarketDo {
	c.DO = *do.(*gen.DO)
	return c
}
